{"version":3,"sources":["images/space-bg2.jpg","images/profile_default_sketchs_png/astronaut.png","images/profile_default_sketchs_png/astronaut2.png","images/profile_default_sketchs_png/meteor.png","images/profile_default_sketchs_png/moon.png","images/profile_default_sketchs_png/planet.png","images/profile_default_sketchs_png/rocket.png","images/profile_default_sketchs_png/small-rocket.png","images/profile_default_sketchs_png/sonda.png","images/profile_default_sketchs_png/star.png","images/space-bg.jpg","components/Logo/Logo.tsx","components/AboutApp/AboutAppDesc.ts","components/AboutApp/AboutApp.tsx","store/actions/userAction.ts","store/types/index.ts","components/LoginDesk/LoginInputs/LoginInputs.tsx","store/actions/notificationBarAction.ts","components/LoginDesk/LoginDesk.tsx","components/LoginDesk/LoginLogic.ts","components/Board/Messages/Messages.tsx","components/Board/NoLogged/NoLogged.tsx","components/Board/AddNewMessage/AddNewMessage.tsx","store/actions/messagesAction.ts","components/Board/Board.tsx","components/LoggedUserProfile/LoggedUserFriends/LoggedUserFriends.tsx","components/LoggedUserProfile/LoggedUserProfile.tsx","components/AllUsersList/UserToAdd/UserToAdd.tsx","components/AllUsersList/AllUsersList.tsx","components/Registration/RegistrationInputs/RegistrationInputs.tsx","components/Registration/RegistrationLogic.ts","components/Registration/Registration.tsx","store/actions/usersAction.ts","components/SubpagesContent/SubpagesContent.tsx","components/MenuIcon/MenuIcon.tsx","store/actions/menuAction.ts","components/Menu/Menu.tsx","components/NotificationBar/NotificationBar.tsx","App.tsx","serviceWorker.ts","store/reducers/menuReducer.ts","store/reducers/userReducer.ts","store/reducers/usersReducer.ts","store/reducers/messagesReducer.ts","store/reducers/notificationBarReducer.ts","store/reducers/index.ts","store/index.ts","index.tsx"],"names":["module","exports","Logo","className","unloggedDesc","welcomeUnlogged","likeSocialMedia","letsTestIt","notSave","AboutApp","loggedUser","name","isLogged","to","setLoginUser","type","setUserDetails","id","img","friends","LoginInputs","labelName","inputValue","setInputValue","classModifier","value","onChange","e","target","setNotificationBar","message","colorBar","animation","LoginDesk","allUsersList","useState","loginValue","setLoginValue","passwordValue","setPasswordValue","dispatch","useDispatch","handleSubmitLogin","preventDefault","login","password","findUser","find","user","isCorrectPassword","tryToLog","onSubmit","Messages","messTemp","useSelector","state","messages","globalMessages","useEffect","messageWrap","document","getElementById","scrollTo","scrollHeight","scrollDown","renderMessages","map","mess","index","key","style","backgroundImage","userID","date","time","text","NoLogged","AddNewMessage","messageValue","setMessageValue","messageTime","Date","toLocaleTimeString","messageDate","toLocaleDateString","dayDotIndex","indexOf","newMessage","addGlobalMessage","handleSubmitMessage","placeholder","Board","LoggedUserFriends","getLoggedUserFriends","friendID","renderFriends","friend","onClick","friendToDeleteID","deleteUserFromFriends","length","LoggedUserProfile","UserToAdd","globalUser","isInLoggedUserList","newFriendID","AllUsersList","renderUsersList","filter","includes","RegistrationInputs","profileSketchs","Astronaut","Astronaut2","Meteor","Moon","Planet","Rocket","SmallRocket","Sonda","Star","Registration","lastUserID","nameValue","setNameValue","handleSubmitRegistration","registrationResult","isNumberRegExp","RegExp","isSpaceRegExp","spaceInLogin","test","passwordWithNumbers","spaceInPassword","validation","findIndex","sketchIndex","Math","floor","random","newUser","addNewRegistredUser","SubpagesContent","allUsers","path","exact","render","list","component","color","MenuIcon","menuVisibility","menu","visibility","topAnimation","centerAnimation","bottomAnimation","spaceBgImage","SpaceBG","Menu","userIsLogged","menuLoad","setMenuLoad","NotificationBar","timer","setTimeout","clearTimeout","App","notificationBar","Boolean","window","location","hostname","match","INITIAL_STATE","INITAL_STATE","TEMP_ACC","accounts","rootReducer","combineReducers","action","listWithoutDeletedFriend","store","createStore","composeWithDevTools","ReactDOM","StrictMode","basename","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.856e4878.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/space-bg2.b22799e8.jpg\";","module.exports = __webpack_public_path__ + \"static/media/astronaut.ebfd8ed5.png\";","module.exports = __webpack_public_path__ + \"static/media/astronaut2.e346f1ac.png\";","module.exports = __webpack_public_path__ + \"static/media/meteor.8bb01bd9.png\";","module.exports = __webpack_public_path__ + \"static/media/moon.0daa6980.png\";","module.exports = __webpack_public_path__ + \"static/media/planet.3f94a447.png\";","module.exports = __webpack_public_path__ + \"static/media/rocket.2209fb3e.png\";","module.exports = __webpack_public_path__ + \"static/media/small-rocket.063f25b5.png\";","module.exports = __webpack_public_path__ + \"static/media/sonda.da77f66c.png\";","module.exports = __webpack_public_path__ + \"static/media/star.9d29d1bc.png\";","module.exports = __webpack_public_path__ + \"static/media/space-bg.2c7ebd72.jpg\";","import React from \"react\";\nimport \"./Logo.scss\";\n\nexport const Logo: React.FC = () => (\n  <h1 className=\"logo\">\n    Space<i className=\"logo__rocket fas fa-space-shuttle\"></i>\n  </h1>\n);\n","export const loggedDesc = {\n  welcomeLogged: \"Cieszymy się, że jesteś z nami!\",\n};\n\nexport const unloggedDesc = {\n  welcomeUnlogged:\n    \"Space to przestrzeń dla Ciebie i Twoich znajomych! Zaloguj się aby zarządzać listą znajomych, sprawdzić tablicę aktualności czy odpisać na komentarz znajomego.\",\n  likeSocialMedia: `Aktualnie aplikacja jest swego rodzaju stymulacją prawdziwej strony\n   social media.`,\n  letsTestIt: `Chcesz wytestować aplikację? Zarejestruj się w zakładce rejestracja, lub kliknij przycisk poniżej.`,\n  notSave: \"Pamiętaj że, wszelkie zmiany nie zostaną zapisane.\",\n};\n","import React from \"react\";\nimport \"./AboutApp.scss\";\nimport { loggedDesc, unloggedDesc } from \"./AboutAppDesc\";\nimport { NavLink } from \"react-router-dom\";\n\nconst { welcomeLogged } = loggedDesc;\nconst { welcomeUnlogged, likeSocialMedia, letsTestIt, notSave } = unloggedDesc;\n\nexport const AboutApp: React.FC<AboutAppProps> = ({ loggedUser }) => (\n  <section className=\"about-app\">\n    <h1 className=\"about-app__title\"> Witaj, {loggedUser.name}!</h1>\n    <p className=\"about-app__desc\">\n      {loggedUser.isLogged ? welcomeLogged : welcomeUnlogged}\n    </p>\n    <p className=\"about-app__desc\">{likeSocialMedia}</p>\n    <p className=\"about-app__desc\">{loggedUser.isLogged ? null : letsTestIt}</p>\n    {loggedUser.isLogged ? null : (\n      <NavLink className=\"about-app__registration-link\" to=\"/registration\">\n        Przejdź do rejestracji\n      </NavLink>\n    )}\n    <p className=\"about-app__desc\">{notSave}</p>\n  </section>\n);\n\ninterface AboutAppProps {\n  loggedUser: {\n    isLogged: boolean;\n    name: string;\n  };\n}\n","import {\n  SET_LOGIN_USER,\n  SET_USER_DETAILS,\n  RESET_USER_DETAILS,\n  ADD_USER_TO_FRIENDS,\n  DELETE_USER_FROM_FRIENDS,\n} from \"./../types\";\n\nexport const setLoginUser = (isLogged: boolean) => ({\n  type: SET_LOGIN_USER,\n  isLogged: isLogged,\n});\n\nexport const setUserDetails = ({ id, name, img, friends }: User) => ({\n  type: SET_USER_DETAILS,\n  id: id,\n  name: name,\n  img: img,\n  friends: friends,\n});\n\nexport const resetUserDetails = () => ({\n  type: RESET_USER_DETAILS,\n});\n\nexport const addUserToFriends = (newFriendID: number) => ({\n  type: ADD_USER_TO_FRIENDS,\n  newFriendID: newFriendID,\n});\n\nexport const deleteUserFromFriends = (friendToDeleteID: number = -1) => ({\n  type: DELETE_USER_FROM_FRIENDS,\n  friendToDeleteID: friendToDeleteID,\n});\n\ninterface User {\n  id: number;\n  name: string;\n  img: string;\n  friends: number[];\n}\n","export const SHOW_MENU = \"SHOW_MENU\";\nexport const HIDE_MENU = \"HIDE_MENU\";\n\nexport const SET_LOGIN_USER = \"SET_LOGIN_USER\";\nexport const SET_USER_DETAILS = \"SET_USER_DETAILS\";\nexport const ADD_USER_TO_FRIENDS = \"ADD_USER_TO_FRIENDS\";\nexport const DELETE_USER_FROM_FRIENDS = \"DELETE_USER_FROM_FRIENDS\";\nexport const RESET_USER_DETAILS = \"RESET_USER_DETAILS\";\n\nexport const ADD_GLOBAL_MESSAGE = \"ADD_GLOBAL_MESSAGE\";\n\nexport const ADD_NEW_REGISTRED_USER = \"ADD_NEW_REGISTRED_USER\";\n\nexport const SET_NOTIFICATION_BAR = \"SET_NOTIFICATION_BAR\";\n","import React from \"react\";\nimport \"./LoginInputs.scss\";\n\nexport const LoginInputs: React.FC<LoginInputsProps> = ({\n  labelName,\n  inputValue,\n  setInputValue,\n  classModifier = \"\",\n}) => (\n  <>\n    <label className=\"login-desk__label\">{labelName}</label>\n    <input\n      className={`login-desk__input ${classModifier}`}\n      type=\"text\"\n      value={inputValue}\n      onChange={(e) => setInputValue(e.target.value)}\n    />\n  </>\n);\n\ninterface LoginInputsProps {\n  labelName: string;\n  inputValue: string;\n  setInputValue: Function;\n  classModifier?: string;\n}\n","import { SET_NOTIFICATION_BAR } from \"./../types\";\n\nexport const setNotificationBar = (\n  message: string,\n  colorBar: string,\n  animation: boolean\n) => ({\n  type: SET_NOTIFICATION_BAR,\n  message: message,\n  colorBar: colorBar,\n  animation: animation,\n});\n","import React, { useState } from \"react\";\nimport \"./LoginDesk.scss\";\nimport { useDispatch } from \"react-redux\";\nimport { tryToLog } from \"./LoginLogic\";\nimport { LoginInputs } from \"./LoginInputs/LoginInputs\";\nimport { NavLink } from \"react-router-dom\";\nimport { setNotificationBar } from \"./../../store/actions/notificationBarAction\";\n\nexport const LoginDesk: React.FC<LoginDeskProps> = ({ allUsersList }) => {\n  const [loginValue, setLoginValue] = useState(\"\");\n  const [passwordValue, setPasswordValue] = useState(\"\");\n  const dispatch = useDispatch();\n\n  const handleSubmitLogin = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    const loginResult = tryToLog(\n      allUsersList,\n      loginValue,\n      passwordValue,\n      dispatch\n    );\n\n    if (!loginResult) {\n      dispatch(\n        setNotificationBar(\"Błąd logowania. Spróbuj ponownie.\", \"red\", true)\n      );\n    }\n  };\n\n  return (\n    <section className=\"login-desk\">\n      <form\n        className=\"login-desk__wrapper\"\n        onSubmit={(e) => {\n          handleSubmitLogin(e);\n        }}\n      >\n        <LoginInputs\n          labelName=\"Login\"\n          inputValue={loginValue}\n          setInputValue={setLoginValue}\n        />\n        <LoginInputs\n          labelName=\"Hasło\"\n          inputValue={passwordValue}\n          setInputValue={setPasswordValue}\n          classModifier=\"login-desk__input--security\"\n        />\n        <button className=\"login-desk__btn\">Zaloguj się</button>\n      </form>\n      <NavLink className=\"login-desk__registration-link\" to=\"/registration\">\n        Nie masz konta? Zarejestruj się tutaj.\n      </NavLink>\n    </section>\n  );\n};\n\nexport interface LoginDeskProps {\n  allUsersList: {\n    login: string;\n    password: string;\n    id: number;\n    isLogged: boolean;\n    name: string;\n    img: string;\n    friends: [];\n  }[];\n}\n","import { setLoginUser, setUserDetails } from \"./../../store/actions/userAction\";\n\nexport const tryToLog = (\n  allUsersList: Users,\n  login: string,\n  password: string,\n  dispatch: Function\n): boolean => {\n  const findUser = allUsersList.find((user) => user.login === login);\n  const isCorrectPassword = findUser?.password === password;\n  if (findUser && isCorrectPassword) {\n    dispatch(setUserDetails(findUser));\n    dispatch(setLoginUser(isCorrectPassword));\n  }\n  return isCorrectPassword;\n};\n\ntype Users = {\n  login: string;\n  password: string;\n  id: number;\n  isLogged: boolean;\n  name: string;\n  img: string;\n  friends: [];\n}[];\n","import React, { useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport \"./Messages.scss\";\n\nconst scrollDown = () => {\n  const messageWrap = document.getElementById(\"messages__wrapper\");\n  messageWrap?.scrollTo(0, messageWrap.scrollHeight);\n};\n\nexport const Messages: React.FC<MessagesProps> = ({ allUsersList }) => {\n  const messTemp = useSelector(\n    (state: Messages) => state.messages.globalMessages\n  );\n\n  useEffect(() => {\n    scrollDown();\n  });\n\n  const renderMessages = messTemp.map((mess, index) => (\n    <div key={index} className=\"message\">\n      <div className=\"message__wrapperIMG\">\n        <div\n          className=\"message__img\"\n          style={{ backgroundImage: `url(${allUsersList[mess.userID].img})` }}\n        ></div>\n        <p className=\"message__user-name\">{allUsersList[mess.userID].name}</p>\n        <p className=\"message__time-and-date\">{`${mess.date} ${mess.time}`}</p>\n      </div>\n      <p className=\"message__text\">{mess.text}</p>\n    </div>\n  ));\n\n  return (\n    <div className=\"messages__wrapper\" id=\"messages__wrapper\">\n      {renderMessages}\n    </div>\n  );\n};\n\ninterface MessagesProps {\n  allUsersList: {\n    id: number;\n    isLogged: boolean;\n    name: string;\n    img: string;\n    friends: [];\n  }[];\n}\n\ninterface Messages {\n  messages: {\n    globalMessages: {\n      userID: number;\n      text: string;\n      time: string;\n      date: string;\n    }[];\n  };\n}\n","import React from \"react\";\nimport \"./NoLogged.scss\";\nimport { NavLink } from \"react-router-dom\";\n\nexport const NoLogged: React.FC = () => (\n  <div className=\"no-logged\">\n    <h1 className=\"no-logged__title\">Tylko dla zalogowanych użytkowników</h1>\n    <NavLink className=\"no-logged__btn\" to=\"/login\">\n      Zaloguj się\n    </NavLink>\n  </div>\n);\n","import React, { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport \"./AddNewMessage.scss\";\nimport { addGlobalMessage } from \"./../../../store/actions/messagesAction\";\nimport { setNotificationBar } from \"../../../store/actions/notificationBarAction\";\n\nexport const AddNewMessage: React.FC<AddNewMessageProps> = ({ loggedUser }) => {\n  const dispatch = useDispatch();\n  const [messageValue, setMessageValue] = useState(\"\");\n\n  const handleSubmitMessage = (e: React.FormEvent<HTMLFormElement>) => {\n    const messageTime = new Date().toLocaleTimeString();\n    let messageDate = new Date().toLocaleDateString();\n    const dayDotIndex = messageDate.indexOf(\".\");\n\n    e.preventDefault();\n\n    if (dayDotIndex === 1) messageDate = `0${messageDate}`;\n\n    if (messageValue) {\n      const newMessage = {\n        userID: loggedUser.id,\n        text: messageValue,\n        time: messageTime,\n        date: messageDate,\n      };\n      dispatch(addGlobalMessage(newMessage));\n      setMessageValue(\"\");\n    } else {\n      dispatch(setNotificationBar(\"Wpisz wiadomość.\", \"red\", true));\n    }\n  };\n\n  return (\n    <div className=\"add-new-message\">\n      <div\n        className=\"add-new-message__logged-user-img\"\n        style={{ backgroundImage: `url(${loggedUser.img})` }}\n      ></div>\n      <form\n        className=\"add-new-message__form\"\n        onSubmit={(e) => handleSubmitMessage(e)}\n      >\n        <input\n          className=\"add-new-message__input\"\n          placeholder=\"Wiadomość...\"\n          type=\"text\"\n          value={messageValue}\n          onChange={(e) => setMessageValue(e.target.value)}\n        />\n        <button className=\"add-new-message__send-btn\">\n          <i className=\"fas fa-space-shuttle add-new-message__send-icon\"></i>\n        </button>\n      </form>\n    </div>\n  );\n};\n\ninterface AddNewMessageProps {\n  loggedUser: {\n    id: number;\n    img: string;\n  };\n}\n","import { ADD_GLOBAL_MESSAGE } from \"./../types\";\n\nexport const addGlobalMessage = (newMessage: NewMessage) => ({\n  type: ADD_GLOBAL_MESSAGE,\n  newMessage: newMessage,\n});\n\ninterface NewMessage {\n  userID: number;\n  text: string;\n  time: string;\n  date: string;\n}\n","import React from \"react\";\nimport \"./Board.scss\";\nimport { Messages } from \"./Messages/Messages\";\nimport { NoLogged } from \"./NoLogged/NoLogged\";\nimport { AddNewMessage } from \"./AddNewMessage/AddNewMessage\";\n\nexport const Board: React.FC<BoardProps> = ({ loggedUser, allUsersList }) => (\n  <section className=\"board\">\n    {loggedUser.isLogged ? (\n      <>\n        <Messages allUsersList={allUsersList} />\n        <AddNewMessage loggedUser={loggedUser} />\n      </>\n    ) : (\n      <NoLogged />\n    )}\n  </section>\n);\n\nexport interface BoardProps {\n  loggedUser: {\n    id: number;\n    isLogged: boolean;\n    img: string;\n  };\n  allUsersList: {\n    id: number;\n    isLogged: boolean;\n    name: string;\n    img: string;\n    friends: [];\n  }[];\n}\n","import React from \"react\";\nimport \"./LoggedUserFriends.scss\";\nimport { useDispatch } from \"react-redux\";\nimport { deleteUserFromFriends } from \"./../../../store/actions/userAction\";\nimport { setNotificationBar } from \"../../../store/actions/notificationBarAction\";\n\nexport const LoggedUserFriends: React.FC<LoggedUserFriendsProps> = ({\n  loggedUser,\n  allUsersList,\n}) => {\n  const dispatch = useDispatch();\n  const getLoggedUserFriends = loggedUser.friends.map((friendID) =>\n    allUsersList.find((user) => user.id === friendID)\n  );\n\n  const renderFriends = getLoggedUserFriends.map((friend) => (\n    <div\n      key={friend?.id}\n      className=\"logged-user-friends__friend-img\"\n      style={{ backgroundImage: `url(${friend?.img})` }}\n    >\n      <span className=\"logged-user-friends__friend-name\">{friend?.name}</span>\n      <i\n        onClick={() => {\n          dispatch(deleteUserFromFriends(friend?.id));\n          dispatch(\n            setNotificationBar(\n              `Usunięto ${friend?.name} ze znajomych.`,\n              \"red\",\n              true\n            )\n          );\n        }}\n        className=\"fas fa-user-minus logged-user-friends__delete-friend\"\n      ></i>\n    </div>\n  ));\n\n  return (\n    <div className=\"logged-user-friends\">\n      <h2 className=\"logged-user-friends__title\">{`Znajomi (${getLoggedUserFriends.length})`}</h2>\n      <div className=\"logged-user-friends__friend-wrapper\">\n        {renderFriends.length ? (\n          <>\n            {renderFriends}\n            <div className=\"logged-user-friends__last-img-margin-on-mobile\"></div>\n          </>\n        ) : (\n          <span className=\"logged-user-friends__friend-name logged-user-friends__friend-name--no-friend\">\n            Brak znajomych\n          </span>\n        )}\n      </div>\n    </div>\n  );\n};\n\ninterface LoggedUserFriendsProps {\n  loggedUser: {\n    friends: [];\n  };\n  allUsersList: {\n    id: number;\n    name: string;\n    img: string;\n  }[];\n}\n","import React from \"react\";\nimport \"./LoggedUserProfile.scss\";\nimport { LoggedUserFriends } from \"./LoggedUserFriends/LoggedUserFriends\";\n\nexport const LoggedUserProfile: React.FC<LoggedUserProfileProps> = ({\n  loggedUser,\n  allUsersList,\n}) => (\n  <section className=\"logged-user-profile\">\n    <div className=\"logged-user-profile__wrapper-name-img\">\n      <h1 className=\"logged-user-profile__name\">{loggedUser.name}</h1>\n      <div\n        className=\"logged-user-profile__img\"\n        style={{\n          backgroundImage: `url(${loggedUser.img})`,\n        }}\n      ></div>\n    </div>\n    <LoggedUserFriends loggedUser={loggedUser} allUsersList={allUsersList} />\n  </section>\n);\n\ninterface LoggedUserProfileProps {\n  loggedUser: {\n    name: string;\n    img: string;\n    friends: [];\n  };\n  allUsersList: {\n    id: number;\n    isLogged: boolean;\n    name: string;\n    img: string;\n    friends: [];\n  }[];\n}\n","import React from \"react\";\nimport \"./UserToAdd.scss\";\nimport { addUserToFriends } from \"./../../../store/actions/userAction\";\nimport { setNotificationBar } from \"../../../store/actions/notificationBarAction\";\n\nexport const UserToAdd: React.FC<UserToAddProps> = ({\n  globalUser,\n  isInLoggedUserList,\n  dispatch,\n}) => (\n  <div className=\"user-to-add__wrapper\">\n    <div\n      className=\"user-to-add__image\"\n      style={{ backgroundImage: `url(${globalUser.img})` }}\n    ></div>\n    <p className=\"user-to-add__name\">{globalUser.name}</p>\n    {isInLoggedUserList ? (\n      <i className=\"fas fa-check user-to-add__add-friend-icon user-to-add__add-friend-icon--added\"></i>\n    ) : (\n      <i\n        onClick={() => {\n          dispatch(\n            setNotificationBar(\n              `Dodano ${globalUser.name} do znajomych.`,\n              \"green\",\n              true\n            )\n          );\n          dispatch(addUserToFriends(globalUser.id));\n        }}\n        className=\"fas fa-user-plus user-to-add__add-friend-icon\"\n      ></i>\n    )}\n  </div>\n);\n\ninterface UserToAddProps {\n  globalUser: {\n    id: number;\n    isLogged: boolean;\n    name: string;\n    img: string;\n  };\n  isInLoggedUserList: boolean;\n  dispatch: Function;\n}\n","import React from \"react\";\nimport \"./AllUsersList.scss\";\nimport { useDispatch } from \"react-redux\";\nimport { UserToAdd } from \"./UserToAdd/UserToAdd\";\n\nexport const AllUsersList: React.FC<UsersProps> = ({\n  loggedUser,\n  allUsersList,\n}) => {\n  const dispatch = useDispatch();\n  const getListWithoutLoggedUser = allUsersList.filter(\n    (user) => user.id !== loggedUser.id\n  );\n\n  const renderUsersList = getListWithoutLoggedUser.map((globalUser) => {\n    const isInLoggedUserList = loggedUser.friends.includes(globalUser.id);\n    return (\n      <UserToAdd\n        key={globalUser.id}\n        globalUser={globalUser}\n        isInLoggedUserList={isInLoggedUserList}\n        dispatch={dispatch}\n      />\n    );\n  });\n\n  return <section className=\"all-users-list\">{renderUsersList}</section>;\n};\n\ninterface UsersProps {\n  loggedUser: {\n    id: number;\n    friends: number[];\n  };\n  allUsersList: {\n    id: number;\n    isLogged: boolean;\n    name: string;\n    img: string;\n  }[];\n}\n","import React from \"react\";\nimport \"./RegistrationInputs.scss\";\n\nexport const RegistrationInputs: React.FC<RegistrationInputsProps> = ({\n  labelName,\n  inputValue,\n  setInputValue,\n  classModifier = \"\",\n}) => (\n  <>\n    <label className=\"registration__label\">{labelName}</label>\n    <input\n      className={`registration__input ${classModifier}`}\n      type=\"text\"\n      value={inputValue}\n      onChange={(e) => setInputValue(e.target.value)}\n    />\n  </>\n);\n\ninterface RegistrationInputsProps {\n  labelName: string;\n  inputValue: string;\n  setInputValue: Function;\n  classModifier?: string;\n}\n","import Astronaut from \"./../../images/profile_default_sketchs_png/astronaut.png\";\nimport Astronaut2 from \"./../../images/profile_default_sketchs_png/astronaut2.png\";\nimport Meteor from \"./../../images/profile_default_sketchs_png/meteor.png\";\nimport Moon from \"./../../images/profile_default_sketchs_png/moon.png\";\nimport Planet from \"./../../images/profile_default_sketchs_png/planet.png\";\nimport Rocket from \"./../../images/profile_default_sketchs_png/rocket.png\";\nimport SmallRocket from \"./../../images/profile_default_sketchs_png/small-rocket.png\";\nimport Sonda from \"./../../images/profile_default_sketchs_png/sonda.png\";\nimport Star from \"./../../images/profile_default_sketchs_png/star.png\";\n\nexport const profileSketchs = [\n  Astronaut,\n  Astronaut2,\n  Meteor,\n  Moon,\n  Planet,\n  Rocket,\n  SmallRocket,\n  Sonda,\n  Star,\n];\n\nexport const validation = (\n  login: string,\n  name: string,\n  password: string\n): boolean | string => {\n  const isNumberRegExp = new RegExp(\"[0-9]\", \"g\");\n  const isSpaceRegExp = new RegExp(\" \", \"g\");\n  const spaceInLogin = isSpaceRegExp.test(login);\n  const passwordWithNumbers = isNumberRegExp.test(password);\n  const spaceInPassword = isSpaceRegExp.test(password);\n  const minLoginAndNameLength = 3;\n  const maxLoginAndNameLength = 20;\n  const minPasswordLength = 5;\n\n  if (login === \"\" || name === \"\" || password === \"\") {\n    return \"Uzupełnij wszystkie pola!\";\n  } else if (login.length < minLoginAndNameLength) {\n    return `Login musi mieć co najmniej ${minLoginAndNameLength} znaki.`;\n  } else if (login.length > maxLoginAndNameLength) {\n    return `Login jest za długi (max ${maxLoginAndNameLength} znaków).`;\n  } else if (spaceInLogin) {\n    return `Login nie może posiadać spacji.`;\n  } else if (name.length < minLoginAndNameLength) {\n    return `Nazwa musi mieć co najmniej ${minLoginAndNameLength} znaki.`;\n  } else if (name.length > maxLoginAndNameLength) {\n    return `Nazwa jest za długa (max ${maxLoginAndNameLength} znaków).`;\n  } else if (password.length < minPasswordLength) {\n    return `Hasło musi mieć co najmniej ${minPasswordLength} znaków.`;\n  } else if (!passwordWithNumbers) {\n    return \"Hasło musi zawierać jedną lub więcej cyfr.\";\n  } else if (spaceInPassword) {\n    return \"Hasło nie może posiadać spacji.\";\n  } else return true;\n};\n","import React, { useState } from \"react\";\nimport \"./Registration.scss\";\nimport { RegistrationInputs } from \"./RegistrationInputs/RegistrationInputs\";\nimport { useDispatch } from \"react-redux\";\nimport { addNewRegistredUser } from \"./../../store/actions/usersAction\";\nimport { setLoginUser, setUserDetails } from \"./../../store/actions/userAction\";\nimport { profileSketchs, validation } from \"./RegistrationLogic\";\nimport { setNotificationBar } from \"./../../store/actions/notificationBarAction\";\n\nexport const Registration: React.FC<RegistrationProps> = ({\n  allUsersList,\n  lastUserID,\n}) => {\n  const [loginValue, setLoginValue] = useState(\"\");\n  const [nameValue, setNameValue] = useState(\"\");\n  const [passwordValue, setPasswordValue] = useState(\"\");\n  const dispatch = useDispatch();\n\n  const handleSubmitRegistration = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    const registrationResult = validation(loginValue, nameValue, passwordValue);\n    const isLoginUsed = allUsersList.findIndex(\n      (user) => user.login === loginValue\n    );\n    if (isLoginUsed === -1) {\n      if (registrationResult === true) {\n        const sketchIndex = Math.floor(Math.random() * profileSketchs.length);\n        const newID = lastUserID + 1;\n        const newUser = {\n          id: newID,\n          login: loginValue,\n          password: passwordValue,\n          name: nameValue,\n          img: profileSketchs[sketchIndex],\n          friends: [],\n        };\n        dispatch(addNewRegistredUser(newUser));\n        dispatch(\n          setNotificationBar(\n            \"Dziękujemy za rejestrację, miłego explorowania!\",\n            \"green\",\n            true\n          )\n        );\n        dispatch(setUserDetails(newUser));\n        dispatch(setLoginUser(true));\n      } else {\n        dispatch(setNotificationBar(registrationResult as string, \"red\", true));\n      }\n    } else {\n      dispatch(setNotificationBar(\"Login jest już zajęty!\", \"red\", true));\n    }\n  };\n\n  return (\n    <section className=\"registration\">\n      <form\n        className=\"registration__form-wrapper\"\n        onSubmit={(e) => handleSubmitRegistration(e)}\n      >\n        <RegistrationInputs\n          labelName=\"Login\"\n          inputValue={loginValue}\n          setInputValue={setLoginValue}\n        />\n\n        <RegistrationInputs\n          labelName=\"Wyświetlana nazwa\"\n          inputValue={nameValue}\n          setInputValue={setNameValue}\n        />\n\n        <RegistrationInputs\n          labelName=\"Hasło*\"\n          inputValue={passwordValue}\n          setInputValue={setPasswordValue}\n          classModifier=\"registration__input--security\"\n        />\n        <p className=\"registration__info-password\">\n          *Hasło: minimum 5 znaków i przynajmniej jedna cyfra.\n        </p>\n\n        <button className=\"registration__btn\">Zarejestruj się</button>\n      </form>\n      <p className=\"registration__info registration__info--animation\">\n        Rejestracja działa tylko na daną sesję, po odświeżeniu strony wszelkie\n        zmiany zostaną utracone!\n      </p>\n    </section>\n  );\n};\n\nexport interface RegistrationProps {\n  allUsersList: {\n    login: string;\n  }[];\n  lastUserID: number;\n}\n","import { ADD_NEW_REGISTRED_USER } from \"./../types\";\n\nexport const addNewRegistredUser = (newUser: NewUser) => ({\n  type: ADD_NEW_REGISTRED_USER,\n  newUser: newUser,\n});\n\ninterface NewUser {\n  id: number;\n  login: string;\n  password: string;\n  name: string;\n  img: string;\n  friends: number[];\n}\n","import React from \"react\";\nimport \"./SubpagesContent.scss\";\nimport { useSelector } from \"react-redux\";\nimport { Route, Switch, Redirect } from \"react-router-dom\";\nimport { AboutApp } from \"../AboutApp/AboutApp\";\nimport { LoginDesk } from \"../LoginDesk/LoginDesk\";\nimport { Board } from \"../Board/Board\";\nimport { LoggedUserProfile } from \"../LoggedUserProfile/LoggedUserProfile\";\nimport { AllUsersList } from \"../AllUsersList/AllUsersList\";\nimport { Registration } from \"../Registration/Registration\";\n\nexport const SubpagesContent: React.FC = () => {\n  const loggedUser = useSelector((state: User) => state.loggedUser);\n  const allUsers = useSelector((state: Users) => state.allUsers);\n\n  return (\n    <main className=\"desk\">\n      <Switch>\n        <Route\n          path=\"/\"\n          exact\n          render={() => <AboutApp loggedUser={loggedUser} />}\n        />\n\n        <Route\n          path=\"/profile\"\n          render={() =>\n            loggedUser.isLogged ? (\n              <LoggedUserProfile\n                loggedUser={loggedUser}\n                allUsersList={allUsers.list}\n              />\n            ) : (\n              <Redirect to=\"/login\" />\n            )\n          }\n        />\n\n        <Route\n          path=\"/board\"\n          render={() => (\n            <Board loggedUser={loggedUser} allUsersList={allUsers.list} />\n          )}\n        />\n\n        <Route\n          path=\"/users\"\n          render={() =>\n            loggedUser.isLogged ? (\n              <AllUsersList\n                loggedUser={loggedUser}\n                allUsersList={allUsers.list}\n              />\n            ) : (\n              <Redirect to=\"/login\" />\n            )\n          }\n        />\n\n        <Route\n          path=\"/login\"\n          render={() =>\n            loggedUser.isLogged ? (\n              <Redirect to=\"/\" />\n            ) : (\n              <LoginDesk allUsersList={allUsers.list} />\n            )\n          }\n        />\n\n        <Route\n          path=\"/registration\"\n          render={() =>\n            loggedUser.isLogged ? (\n              <Redirect to=\"/\" />\n            ) : (\n              <Registration\n                allUsersList={allUsers.list}\n                lastUserID={allUsers.lastUserID}\n              />\n            )\n          }\n        />\n\n        <Route component={() => <div style={{ color: \"white\" }}>BŁĄD</div>} />\n      </Switch>\n    </main>\n  );\n};\n\ninterface User {\n  loggedUser: {\n    id: number;\n    isLogged: boolean;\n    name: string;\n    img: string;\n    friends: [];\n  };\n}\n\ninterface Users {\n  allUsers: {\n    list: {\n      login: string;\n      password: string;\n      id: number;\n      isLogged: boolean;\n      name: string;\n      img: string;\n      friends: [];\n    }[];\n    lastUserID: number;\n  };\n}\n","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { hideMenu, showMenu } from \"./../../store/actions/menuAction\";\nimport \"./MenuIcon.scss\";\n\nexport const MenuIcon: React.FC = () => {\n  const menuVisibility = useSelector((state: Menu) => state.menu.visibility);\n  const dispatch = useDispatch();\n\n  const topAnimation = menuVisibility\n    ? \"menu-icon__bar--top-animation\"\n    : \"menu-icon__bar--top-animationBack\";\n  const centerAnimation = menuVisibility\n    ? \"menu-icon__bar--center-animation\"\n    : \"\";\n  const bottomAnimation = menuVisibility\n    ? \"menu-icon__bar--bottom-animation\"\n    : \"menu-icon__bar--bottom-animationBack\";\n\n  return (\n    <div\n      className=\"menu-icon\"\n      onClick={() => {\n        if (menuVisibility) dispatch(hideMenu());\n        else dispatch(showMenu());\n      }}\n    >\n      <span\n        className={`menu-icon__bar menu-icon__bar--top ${topAnimation}`}\n      ></span>\n      <span\n        className={`menu-icon__bar menu-icon__bar--center ${centerAnimation}`}\n      ></span>\n      <span\n        className={`menu-icon__bar menu-icon__bar--bottom ${bottomAnimation}`}\n      ></span>\n    </div>\n  );\n};\n\ninterface Menu {\n  menu: {\n    visibility: boolean;\n  };\n}\n","import { HIDE_MENU, SHOW_MENU } from \"./../types\";\n\nexport const showMenu = () => {\n  return {\n    type: SHOW_MENU,\n    visibility: true,\n  };\n};\n\nexport const hideMenu = () => {\n  return {\n    type: HIDE_MENU,\n    visibility: false,\n  };\n};\n","import React, { useState } from \"react\";\nimport \"./Menu.scss\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport SpaceBG from \"./../../images/space-bg.jpg\";\nimport { NavLink } from \"react-router-dom\";\nimport { hideMenu } from \"./../../store/actions/menuAction\";\nimport {\n  setLoginUser,\n  resetUserDetails,\n} from \"./../../store/actions/userAction\";\n\nconst spaceBgImage = { backgroundImage: `url(${SpaceBG})` };\n\nexport const Menu: React.FC = () => {\n  const dispatch = useDispatch();\n  const menuVisibility = useSelector((state: Menu) => state.menu.visibility);\n  const userIsLogged = useSelector((state: User) => state.loggedUser.isLogged);\n  const [menuLoad, setMenuLoad] = useState(false);\n  const animation = menuVisibility ? \"menu--show\" : \"menu--hide\";\n\n  if (menuVisibility && !menuLoad) setMenuLoad(true);\n\n  return (\n    <nav className={`menu ${menuLoad ? animation : \"\"}`} style={spaceBgImage}>\n      <ul className=\"menu__container\">\n        <NavLink\n          className=\"menu__link\"\n          to=\"/\"\n          exact\n          onClick={() => dispatch(hideMenu())}\n        >\n          O aplikacji\n        </NavLink>\n\n        {userIsLogged ? (\n          <NavLink\n            className=\"menu__link\"\n            to=\"/profile\"\n            onClick={() => dispatch(hideMenu())}\n          >\n            Profil\n          </NavLink>\n        ) : null}\n\n        <NavLink\n          className=\"menu__link\"\n          to=\"/board\"\n          onClick={() => dispatch(hideMenu())}\n        >\n          Tablica\n        </NavLink>\n\n        {userIsLogged ? (\n          <NavLink\n            className=\"menu__link\"\n            to=\"/users\"\n            onClick={() => dispatch(hideMenu())}\n          >\n            Użytkownicy\n          </NavLink>\n        ) : null}\n\n        {userIsLogged ? (\n          <NavLink\n            className=\"menu__link\"\n            to=\"/login\"\n            onClick={() => {\n              dispatch(hideMenu());\n              dispatch(setLoginUser(false));\n              dispatch(resetUserDetails());\n            }}\n          >\n            Wyloguj\n          </NavLink>\n        ) : (\n          <NavLink\n            className=\"menu__link\"\n            to=\"/login\"\n            onClick={() => dispatch(hideMenu())}\n          >\n            Logowanie\n          </NavLink>\n        )}\n\n        {userIsLogged ? null : (\n          <NavLink\n            className=\"menu__link\"\n            to=\"/registration\"\n            onClick={() => dispatch(hideMenu())}\n          >\n            Rejestracja\n          </NavLink>\n        )}\n      </ul>\n    </nav>\n  );\n};\n\ninterface Menu {\n  menu: {\n    visibility: boolean;\n  };\n}\n\ninterface User {\n  loggedUser: {\n    isLogged: boolean;\n  };\n}\n","import React, { useEffect } from \"react\";\nimport \"./NotificationBar.scss\";\nimport { useDispatch } from \"react-redux\";\nimport { setNotificationBar } from \"./../../store/actions/notificationBarAction\";\n\nexport const NotificationBar: React.FC<NotificationBarProps> = ({\n  message,\n  colorBar,\n  animation,\n}) => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    const timer = setTimeout(\n      () => dispatch(setNotificationBar(\"\", \"green\", false)),\n      1800\n    );\n    return () => clearTimeout(timer);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [animation]);\n\n  return (\n    <div\n      className={`notification-bar notification-bar--${colorBar} notification-bar--${\n        animation ? \"animation\" : \"\"\n      }`}\n    >\n      <p className=\"notification-bar__message\">{message}</p>\n    </div>\n  );\n};\n\nexport interface NotificationBarProps {\n  message: string;\n  colorBar: string;\n  animation: boolean;\n}\n","import React from \"react\";\nimport SpaceBG from \"./images/space-bg2.jpg\";\nimport \"./App.scss\";\nimport { Logo } from \"./components/Logo/Logo\";\nimport { SubpagesContent } from \"./components/SubpagesContent/SubpagesContent\";\nimport { MenuIcon } from \"./components/MenuIcon/MenuIcon\";\nimport { Menu } from \"./components/Menu/Menu\";\nimport { NotificationBar } from \"./components/NotificationBar/NotificationBar\";\nimport { useSelector } from \"react-redux\";\n\nconst spaceBgImage = { backgroundImage: `url(${SpaceBG})` };\n\nexport const App = () => {\n  const notificationBar = useSelector(\n    (state: Notification) => state.notificationBar\n  );\n  const { message, colorBar, animation } = notificationBar;\n\n  return (\n    <div className=\"app\" style={spaceBgImage}>\n      <MenuIcon />\n      <Logo />\n      <SubpagesContent />\n      <Menu />\n      <NotificationBar\n        message={message}\n        colorBar={colorBar}\n        animation={animation}\n      />\n    </div>\n  );\n};\n\ninterface Notification {\n  notificationBar: {\n    message: string;\n    colorBar: string;\n    animation: boolean;\n  };\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { HIDE_MENU, SHOW_MENU } from \"./../types\";\n\nconst INITIAL_STATE = {\n  visibility: false,\n};\n\nexport const menuReducer = (state = INITIAL_STATE, action: Action) => {\n  switch (action.type) {\n    case SHOW_MENU:\n      return { ...state, visibility: action.visibility };\n    case HIDE_MENU:\n      return { ...state, visibility: action.visibility };\n    default:\n      return state;\n  }\n};\n\ninterface Action {\n  type: string;\n  visibility: boolean;\n}\n","import {\n  SET_LOGIN_USER,\n  SET_USER_DETAILS,\n  RESET_USER_DETAILS,\n  ADD_USER_TO_FRIENDS,\n  DELETE_USER_FROM_FRIENDS,\n} from \"./../types\";\n\nconst INITIAL_STATE = {\n  id: -1,\n  isLogged: false,\n  name: \"Nieznajomy\",\n  img: \"\",\n  friends: [],\n};\n\nexport const userReducer = (state = INITIAL_STATE, action: Action) => {\n  switch (action.type) {\n    case SET_LOGIN_USER:\n      return {\n        ...state,\n        isLogged: action.isLogged,\n      };\n    case SET_USER_DETAILS:\n      return {\n        ...state,\n        id: action.id,\n        name: action.name,\n        img: action.img,\n        friends: action.friends,\n      };\n    case RESET_USER_DETAILS:\n      return {\n        ...state,\n        ...INITIAL_STATE,\n      };\n    case ADD_USER_TO_FRIENDS:\n      return {\n        ...state,\n        friends: [...state.friends, action.newFriendID],\n      };\n    case DELETE_USER_FROM_FRIENDS:\n      const listWithoutDeletedFriend = state.friends.filter(\n        (friend) => friend !== action.friendToDeleteID\n      );\n      return {\n        ...state,\n        friends: listWithoutDeletedFriend,\n      };\n    default:\n      return state;\n  }\n};\n\ninterface Action {\n  type: string;\n  id: number;\n  isLogged: boolean;\n  name: string;\n  img: string;\n  friends: number[];\n  newFriendID: number;\n  friendToDeleteID: number;\n}\n","import { ADD_NEW_REGISTRED_USER } from \"./../types\";\nimport TEMP_ACC from \"./../../accounts.json\";\n\nconst INITAL_STATE = {\n  list: TEMP_ACC.accounts,\n  lastUserID: TEMP_ACC.accounts.length - 1,\n};\n\nexport const usersReducer = (state = INITAL_STATE, action: Action) => {\n  switch (action.type) {\n    case ADD_NEW_REGISTRED_USER:\n      return {\n        ...state,\n        list: [...state.list, action.newUser],\n        lastUserID: action.newUser.id,\n      };\n    default:\n      return state;\n  }\n};\n\ninterface Action {\n  type: string;\n  newUser: {\n    id: number;\n    login: string;\n    password: string;\n    name: string;\n    img: string;\n    friends: number[];\n  };\n}\n","import { ADD_GLOBAL_MESSAGE } from \"./../types\";\nimport TEMP_MESS from \"./../../messages.json\";\n\nconst INITAL_STATE = {\n  globalMessages: TEMP_MESS.messages,\n};\n\nexport const messageReducer = (state = INITAL_STATE, action: Action) => {\n  switch (action.type) {\n    case ADD_GLOBAL_MESSAGE:\n      return {\n        ...state,\n        globalMessages: [...state.globalMessages, action.newMessage],\n      };\n    default:\n      return state;\n  }\n};\n\ninterface Action {\n  type: string;\n  newMessage: {\n    userID: number;\n    text: string;\n    time: string;\n    date: string;\n  };\n}\n","import { SET_NOTIFICATION_BAR } from \"./../types\";\n\nconst INITIAL_STATE = {\n  message: \"\",\n  colorBar: \"green\",\n  animation: false,\n};\n\nexport const notificationBarReducer = (\n  state = INITIAL_STATE,\n  action: Action\n) => {\n  switch (action.type) {\n    case SET_NOTIFICATION_BAR:\n      return {\n        ...state,\n        message: action.message,\n        colorBar: action.colorBar,\n        animation: action.animation,\n      };\n    default:\n      return state;\n  }\n};\n\ninterface Action {\n  type: string;\n  message: string;\n  colorBar: string;\n  animation: boolean;\n}\n","import { combineReducers } from \"redux\";\nimport { menuReducer } from \"./menuReducer\";\nimport { userReducer } from \"./userReducer\";\nimport { usersReducer } from \"./usersReducer\";\nimport { messageReducer } from \"./messagesReducer\";\nimport { notificationBarReducer } from \"./notificationBarReducer\";\n\nexport const rootReducer = combineReducers({\n  menu: menuReducer,\n  loggedUser: userReducer,\n  allUsers: usersReducer,\n  messages: messageReducer,\n  notificationBar: notificationBarReducer,\n});\n","import { createStore } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport { rootReducer } from \"./reducers/\";\n\nexport const store = createStore(rootReducer, composeWithDevTools());\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport { App } from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./store\";\nimport { HashRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter basename=\"/\">\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}