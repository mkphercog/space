{"version":3,"sources":["images/space-bg2.jpg","images/profile_default_sketchs_png/astronaut.png","images/profile_default_sketchs_png/astronaut2.png","images/profile_default_sketchs_png/meteor.png","images/profile_default_sketchs_png/moon.png","images/profile_default_sketchs_png/planet.png","images/profile_default_sketchs_png/rocket.png","images/profile_default_sketchs_png/small-rocket.png","images/profile_default_sketchs_png/sonda.png","images/profile_default_sketchs_png/star.png","images/space-bg.jpg","components/Logo/Logo.tsx","components/AboutApp/AboutAppDesc.ts","components/AboutApp/AboutApp.tsx","store/actions/userAction.ts","store/types/index.ts","components/LoginDesk/LoginInputs/LoginInputs.tsx","components/LoginDesk/LoginDesk.tsx","components/LoginDesk/LoginLogic.ts","components/Board/Messages/Messages.tsx","components/Board/NoLogged/NoLogged.tsx","store/actions/notificationBarAction.ts","components/Board/AddNewMessage/AddNewMessage.tsx","store/actions/messagesAction.ts","components/Board/Board.tsx","components/LoggedUserProfile/LoggedUserFriends/LoggedUserFriends.tsx","components/LoggedUserProfile/LoggedUserProfile.tsx","components/AllUsersList/UserToAdd/UserToAdd.tsx","components/AllUsersList/AllUsersList.tsx","components/Registration/RegistrationInputs/RegistrationInputs.tsx","components/Registration/RegistrationLogic.ts","components/Registration/Registration.tsx","store/actions/usersAction.ts","components/SubpagesContent/SubpagesContent.tsx","components/MenuIcon/MenuIcon.tsx","store/actions/menuAction.ts","components/Menu/Menu.tsx","components/Notifications/NotificationBar/NotificationBar.tsx","components/Notifications/Notifications.tsx","App.tsx","serviceWorker.ts","store/reducers/menuReducer.ts","store/reducers/userReducer.ts","store/reducers/usersReducer.ts","store/reducers/messagesReducer.ts","store/reducers/notificationBarReducer.ts","store/reducers/index.ts","store/index.ts","index.tsx"],"names":["module","exports","Logo","className","unloggedDesc","welcomeUnlogged","likeSocialMedia","letsTestIt","notSave","AboutApp","loggedUser","name","isLogged","to","setLoginUser","type","setUserDetails","id","img","friends","deleteUserFromFriends","friendToDeleteID","LoginInputs","labelName","inputValue","setInputValue","security","classError","setLoginError","value","onChange","e","target","LoginDesk","allUsersList","useState","loginValue","setLoginValue","passwordValue","setPasswordValue","loginError","loginLoad","setLoginLoad","dispatch","useDispatch","handleSubmitLogin","preventDefault","loginResult","login","password","findUser","find","user","isCorrectPassword","tryToLog","onSubmit","Messages","messTemp","useSelector","state","messages","globalMessages","useEffect","messageWrap","document","getElementById","scrollTo","scrollHeight","scrollDown","renderMessages","map","mess","index","key","style","backgroundImage","userID","date","time","text","NoLogged","setNotificationBar","messageText","colorBar","AddNewMessage","messageValue","setMessageValue","messageTime","Date","toLocaleTimeString","messageDate","toLocaleDateString","dayDotIndex","indexOf","newMessage","addGlobalMessage","handleSubmitMessage","placeholder","Board","LoggedUserFriends","getLoggedUserFriends","friendID","renderFriends","friend","onClick","length","LoggedUserProfile","UserToAdd","globalUser","isInLoggedUserList","newFriendID","AllUsersList","renderUsersList","filter","includes","RegistrationInputs","registrationError","profileSketchs","Astronaut","Astronaut2","Meteor","Moon","Planet","Rocket","SmallRocket","Sonda","Star","Registration","lastUserID","nameValue","setNameValue","setRegistationError","errorMessage","setErrorMessage","registrationLoad","setRegistrationLoad","handleSubmitRegistration","registrationResult","isNumberRegExp","RegExp","isSpaceRegExp","spaceInLogin","test","passwordWithNumbers","spaceInPassword","validation","findIndex","sketchIndex","Math","floor","random","newUser","addNewRegistredUser","SubpagesContent","allUsers","updatedUsersList","list","path","exact","render","component","color","MenuIcon","menuVisibility","menu","visibility","topAnimation","centerAnimation","bottomAnimation","spaceBgImage","SpaceBG","Menu","userIsLogged","menuLoad","setMenuLoad","animation","NotificationBar","Notifications","notificationList","timeIndex","setTimeout","clearTimeout","renderNotifications","App","notificationBar","Boolean","window","location","hostname","match","INITIAL_STATE","INITAL_STATE","TEMP_ACC","accounts","rootReducer","combineReducers","action","listWithoutDeletedFriend","store","createStore","composeWithDevTools","ReactDOM","StrictMode","basename","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8b1b3fc7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/space-bg2.b22799e8.jpg\";","module.exports = __webpack_public_path__ + \"static/media/astronaut.ebfd8ed5.png\";","module.exports = __webpack_public_path__ + \"static/media/astronaut2.e346f1ac.png\";","module.exports = __webpack_public_path__ + \"static/media/meteor.8bb01bd9.png\";","module.exports = __webpack_public_path__ + \"static/media/moon.0daa6980.png\";","module.exports = __webpack_public_path__ + \"static/media/planet.3f94a447.png\";","module.exports = __webpack_public_path__ + \"static/media/rocket.2209fb3e.png\";","module.exports = __webpack_public_path__ + \"static/media/small-rocket.063f25b5.png\";","module.exports = __webpack_public_path__ + \"static/media/sonda.da77f66c.png\";","module.exports = __webpack_public_path__ + \"static/media/star.9d29d1bc.png\";","module.exports = __webpack_public_path__ + \"static/media/space-bg.2c7ebd72.jpg\";","import React from \"react\";\nimport \"./Logo.scss\";\n\nexport const Logo: React.FC = () => (\n  <h1 className=\"logo\">\n    Space<i className=\"logo__rocket fas fa-space-shuttle\"></i>\n  </h1>\n);\n","export const loggedDesc = {\n  welcomeLogged: \"Cieszymy się, że jesteś z nami!\",\n};\n\nexport const unloggedDesc = {\n  welcomeUnlogged:\n    \"Space to przestrzeń dla Ciebie i Twoich znajomych! Zaloguj się aby zarządzać listą znajomych, sprawdzić tablicę aktualności czy odpisać na komentarz znajomego.\",\n  likeSocialMedia: `Aktualnie aplikacja jest swego rodzaju stymulacją prawdziwej strony\n   social media.`,\n  letsTestIt: `Chcesz wytestować aplikację? Zarejestruj się w zakładce rejestracja, lub kliknij przycisk poniżej.`,\n  notSave: \"Pamiętaj że, wszelkie zmiany nie zostaną zapisane.\",\n};\n","import React from \"react\";\nimport \"./AboutApp.scss\";\nimport { loggedDesc, unloggedDesc } from \"./AboutAppDesc\";\nimport { NavLink } from \"react-router-dom\";\n\nconst { welcomeLogged } = loggedDesc;\nconst { welcomeUnlogged, likeSocialMedia, letsTestIt, notSave } = unloggedDesc;\n\nexport const AboutApp: React.FC<AboutAppProps> = ({ loggedUser }) => (\n  <section className=\"about-app\">\n    <h1 className=\"about-app__title\"> Witaj, {loggedUser.name}!</h1>\n    <p className=\"about-app__desc\">\n      {loggedUser.isLogged ? welcomeLogged : welcomeUnlogged}\n    </p>\n    <p className=\"about-app__desc\">{likeSocialMedia}</p>\n    <p className=\"about-app__desc\">{loggedUser.isLogged ? null : letsTestIt}</p>\n    {loggedUser.isLogged ? null : (\n      <NavLink className=\"about-app__registration-link\" to=\"/registration\">\n        Przejdź do rejestracji\n      </NavLink>\n    )}\n    <p className=\"about-app__desc\">{notSave}</p>\n  </section>\n);\n\ninterface AboutAppProps {\n  loggedUser: {\n    isLogged: boolean;\n    name: string;\n  };\n}\n","import {\n  SET_LOGIN_USER,\n  SET_USER_DETAILS,\n  RESET_USER_DETAILS,\n  ADD_USER_TO_FRIENDS,\n  DELETE_USER_FROM_FRIENDS,\n} from \"./../types\";\n\nexport const setLoginUser = (isLogged: boolean) => ({\n  type: SET_LOGIN_USER,\n  isLogged: isLogged,\n});\n\nexport const setUserDetails = ({ id, name, img, friends }: User) => ({\n  type: SET_USER_DETAILS,\n  id: id,\n  name: name,\n  img: img,\n  friends: friends,\n});\n\nexport const resetUserDetails = () => ({\n  type: RESET_USER_DETAILS,\n});\n\nexport const addUserToFriends = (newFriendID: number) => ({\n  type: ADD_USER_TO_FRIENDS,\n  newFriendID: newFriendID,\n});\n\nexport const deleteUserFromFriends = (friendToDeleteID: number = -1) => ({\n  type: DELETE_USER_FROM_FRIENDS,\n  friendToDeleteID: friendToDeleteID,\n});\n\ninterface User {\n  id: number;\n  name: string;\n  img: string;\n  friends: number[];\n}\n","export const SHOW_MENU = \"SHOW_MENU\";\nexport const HIDE_MENU = \"HIDE_MENU\";\n\nexport const SET_LOGIN_USER = \"SET_LOGIN_USER\";\nexport const SET_USER_DETAILS = \"SET_USER_DETAILS\";\nexport const ADD_USER_TO_FRIENDS = \"ADD_USER_TO_FRIENDS\";\nexport const DELETE_USER_FROM_FRIENDS = \"DELETE_USER_FROM_FRIENDS\";\nexport const RESET_USER_DETAILS = \"RESET_USER_DETAILS\";\n\nexport const ADD_GLOBAL_MESSAGE = \"ADD_GLOBAL_MESSAGE\";\n\nexport const ADD_NEW_REGISTRED_USER = \"ADD_NEW_REGISTRED_USER\";\nexport const UPDATE_USERS_LIST = \"UPDATE_USERS_LIST\";\n\nexport const SET_NOTIFICATION_BAR = \"SET_NOTIFICATION_BAR\";\nexport const DELETE_NOTIFICATIONS = \"DELETE_NOTIFICATIONS\";\n","import React from \"react\";\nimport \"./LoginInputs.scss\";\n\nexport const LoginInputs: React.FC<LoginInputsProps> = ({\n  labelName,\n  inputValue,\n  setInputValue,\n  security = false,\n  classError = false,\n  setLoginError,\n}) => (\n  <>\n    <label className=\"login-desk__label\">{labelName}</label>\n    <input\n      className={`login-desk__input \n      ${security && \"login-desk__input--security\"} \n      ${classError && \"login-desk__input--error\"}`}\n      type=\"text\"\n      value={inputValue}\n      onChange={(e) => {\n        if (classError) setLoginError(false);\n        setInputValue(e.target.value);\n      }}\n    />\n  </>\n);\n\ninterface LoginInputsProps {\n  labelName: string;\n  inputValue: string;\n  setInputValue: Function;\n  security?: boolean;\n  classError?: boolean;\n  setLoginError: Function;\n}\n","import React, { useState } from \"react\";\nimport \"./LoginDesk.scss\";\nimport { useDispatch } from \"react-redux\";\nimport { tryToLog } from \"./LoginLogic\";\nimport { LoginInputs } from \"./LoginInputs/LoginInputs\";\nimport { NavLink } from \"react-router-dom\";\n\nexport const LoginDesk: React.FC<LoginDeskProps> = ({ allUsersList }) => {\n  const [loginValue, setLoginValue] = useState(\"\");\n  const [passwordValue, setPasswordValue] = useState(\"\");\n  const [loginError, setLoginError] = useState(false);\n  const [loginLoad, setLoginLoad] = useState(false);\n  const dispatch = useDispatch();\n\n  if (loginError && !loginLoad) setLoginLoad(true);\n\n  const handleSubmitLogin = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    const loginResult = tryToLog(\n      allUsersList,\n      loginValue,\n      passwordValue,\n      dispatch\n    );\n    setLoginError(!loginResult);\n  };\n\n  return (\n    <section className=\"login-desk\">\n      <form\n        className=\"login-desk__wrapper\"\n        onSubmit={(e) => {\n          handleSubmitLogin(e);\n        }}\n      >\n        <LoginInputs\n          labelName=\"Login\"\n          inputValue={loginValue}\n          setInputValue={setLoginValue}\n          classError={loginError}\n          setLoginError={setLoginError}\n        />\n        <LoginInputs\n          labelName=\"Hasło\"\n          inputValue={passwordValue}\n          setInputValue={setPasswordValue}\n          security={true}\n          classError={loginError}\n          setLoginError={setLoginError}\n        />\n        <button className=\"login-desk__btn\">Zaloguj się</button>\n      </form>\n      <p\n        className={`login-desk__error-message ${\n          loginError\n            ? \"login-desk__error-message--show\"\n            : loginLoad\n            ? \"login-desk__error-message--hide\"\n            : \"\"\n        }`}\n      >\n        Błąd logowania, spróbuj ponownie.\n      </p>\n      <NavLink className=\"login-desk__registration-link\" to=\"/registration\">\n        Nie masz konta? Zarejestruj się tutaj.\n      </NavLink>\n    </section>\n  );\n};\n\nexport interface LoginDeskProps {\n  allUsersList: {\n    login: string;\n    password: string;\n    id: number;\n    isLogged: boolean;\n    name: string;\n    img: string;\n    friends: [];\n  }[];\n}\n","import { setLoginUser, setUserDetails } from \"./../../store/actions/userAction\";\n\nexport const tryToLog = (\n  allUsersList: Users,\n  login: string,\n  password: string,\n  dispatch: Function\n): boolean => {\n  const findUser = allUsersList.find((user) => user.login === login);\n  const isCorrectPassword = findUser?.password === password;\n  if (findUser && isCorrectPassword) {\n    dispatch(setUserDetails(findUser));\n    dispatch(setLoginUser(isCorrectPassword));\n  }\n  return isCorrectPassword;\n};\n\ntype Users = {\n  login: string;\n  password: string;\n  id: number;\n  isLogged: boolean;\n  name: string;\n  img: string;\n  friends: [];\n}[];\n","import React, { useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport \"./Messages.scss\";\n\nconst scrollDown = () => {\n  const messageWrap = document.getElementById(\"messages__wrapper\");\n  messageWrap?.scrollTo(0, messageWrap.scrollHeight);\n};\n\nexport const Messages: React.FC<MessagesProps> = ({ allUsersList }) => {\n  const messTemp = useSelector(\n    (state: Messages) => state.messages.globalMessages\n  );\n\n  useEffect(() => {\n    scrollDown();\n  });\n\n  const renderMessages = messTemp.map((mess, index) => (\n    <div key={index} className=\"message\">\n      <div className=\"message__wrapperIMG\">\n        <div\n          className=\"message__img\"\n          style={{ backgroundImage: `url(${allUsersList[mess.userID].img})` }}\n        ></div>\n        <p className=\"message__user-name\">{allUsersList[mess.userID].name}</p>\n        <p className=\"message__time-and-date\">{`${mess.date} ${mess.time}`}</p>\n      </div>\n      <p className=\"message__text\">{mess.text}</p>\n    </div>\n  ));\n\n  return (\n    <div className=\"messages__wrapper\" id=\"messages__wrapper\">\n      {renderMessages}\n    </div>\n  );\n};\n\ninterface MessagesProps {\n  allUsersList: {\n    id: number;\n    isLogged: boolean;\n    name: string;\n    img: string;\n    friends: [];\n  }[];\n}\n\ninterface Messages {\n  messages: {\n    globalMessages: {\n      userID: number;\n      text: string;\n      time: string;\n      date: string;\n    }[];\n  };\n}\n","import React from \"react\";\nimport \"./NoLogged.scss\";\nimport { NavLink } from \"react-router-dom\";\n\nexport const NoLogged: React.FC = () => (\n  <div className=\"no-logged\">\n    <h1 className=\"no-logged__title\">Tylko dla zalogowanych użytkowników</h1>\n    <NavLink className=\"no-logged__btn\" to=\"/login\">\n      Zaloguj się\n    </NavLink>\n  </div>\n);\n","import { SET_NOTIFICATION_BAR, DELETE_NOTIFICATIONS } from \"./../types\";\n\nexport const setNotificationBar = (messageText: string, colorBar: string) => ({\n  type: SET_NOTIFICATION_BAR,\n  messageText: messageText,\n  colorBar: colorBar,\n});\n\nexport const deleteNotifications = () => ({\n  type: DELETE_NOTIFICATIONS,\n  notificationList: [],\n});\n","import React, { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport \"./AddNewMessage.scss\";\nimport { addGlobalMessage } from \"./../../../store/actions/messagesAction\";\nimport { setNotificationBar } from \"../../../store/actions/notificationBarAction\";\n\nexport const AddNewMessage: React.FC<AddNewMessageProps> = ({ loggedUser }) => {\n  const dispatch = useDispatch();\n  const [messageValue, setMessageValue] = useState(\"\");\n\n  const handleSubmitMessage = (e: React.FormEvent<HTMLFormElement>) => {\n    const messageTime = new Date().toLocaleTimeString();\n    let messageDate = new Date().toLocaleDateString();\n    const dayDotIndex = messageDate.indexOf(\".\");\n\n    e.preventDefault();\n\n    if (dayDotIndex === 1) messageDate = `0${messageDate}`;\n\n    if (messageValue) {\n      const newMessage = {\n        userID: loggedUser.id,\n        text: messageValue,\n        time: messageTime,\n        date: messageDate,\n      };\n      dispatch(addGlobalMessage(newMessage));\n      setMessageValue(\"\");\n    } else {\n      dispatch(setNotificationBar(\"Wpisz wiadomość.\", \"red\"));\n    }\n  };\n\n  return (\n    <div className=\"add-new-message\">\n      <div\n        className=\"add-new-message__logged-user-img\"\n        style={{ backgroundImage: `url(${loggedUser.img})` }}\n      ></div>\n      <form\n        className=\"add-new-message__form\"\n        onSubmit={(e) => handleSubmitMessage(e)}\n      >\n        <input\n          className=\"add-new-message__input\"\n          placeholder=\"Wiadomość...\"\n          type=\"text\"\n          value={messageValue}\n          onChange={(e) => setMessageValue(e.target.value)}\n        />\n        <button className=\"add-new-message__send-btn\">\n          <i className=\"fas fa-space-shuttle add-new-message__send-icon\"></i>\n        </button>\n      </form>\n    </div>\n  );\n};\n\ninterface AddNewMessageProps {\n  loggedUser: {\n    id: number;\n    img: string;\n  };\n}\n","import { ADD_GLOBAL_MESSAGE } from \"./../types\";\n\nexport const addGlobalMessage = (newMessage: NewMessage) => ({\n  type: ADD_GLOBAL_MESSAGE,\n  newMessage: newMessage,\n});\n\ninterface NewMessage {\n  userID: number;\n  text: string;\n  time: string;\n  date: string;\n}\n","import React from \"react\";\nimport \"./Board.scss\";\nimport { Messages } from \"./Messages/Messages\";\nimport { NoLogged } from \"./NoLogged/NoLogged\";\nimport { AddNewMessage } from \"./AddNewMessage/AddNewMessage\";\n\nexport const Board: React.FC<BoardProps> = ({ loggedUser, allUsersList }) => (\n  <section className=\"board\">\n    {loggedUser.isLogged ? (\n      <>\n        <Messages allUsersList={allUsersList} />\n        <AddNewMessage loggedUser={loggedUser} />\n      </>\n    ) : (\n      <NoLogged />\n    )}\n  </section>\n);\n\nexport interface BoardProps {\n  loggedUser: {\n    id: number;\n    isLogged: boolean;\n    img: string;\n  };\n  allUsersList: {\n    id: number;\n    isLogged: boolean;\n    name: string;\n    img: string;\n    friends: [];\n  }[];\n}\n","import React from \"react\";\nimport \"./LoggedUserFriends.scss\";\nimport { useDispatch } from \"react-redux\";\nimport { deleteUserFromFriends } from \"./../../../store/actions/userAction\";\nimport { setNotificationBar } from \"../../../store/actions/notificationBarAction\";\n\nexport const LoggedUserFriends: React.FC<LoggedUserFriendsProps> = ({\n  loggedUser,\n  allUsersList,\n}) => {\n  const dispatch = useDispatch();\n  const getLoggedUserFriends = loggedUser.friends.map((friendID) =>\n    allUsersList.find((user) => user.id === friendID)\n  );\n\n  const renderFriends = getLoggedUserFriends.map((friend) => (\n    <div\n      key={friend?.id}\n      className=\"logged-user-friends__friend-img\"\n      style={{ backgroundImage: `url(${friend?.img})` }}\n    >\n      <span className=\"logged-user-friends__friend-name\">{friend?.name}</span>\n      <i\n        onClick={() => {\n          dispatch(deleteUserFromFriends(friend?.id));\n          dispatch(\n            setNotificationBar(`Usunięto ${friend?.name} ze znajomych.`, \"red\")\n          );\n        }}\n        className=\"fas fa-user-minus logged-user-friends__delete-friend\"\n      ></i>\n    </div>\n  ));\n\n  return (\n    <div className=\"logged-user-friends\">\n      <h2 className=\"logged-user-friends__title\">{`Znajomi (${getLoggedUserFriends.length})`}</h2>\n      <div className=\"logged-user-friends__friend-wrapper\">\n        {renderFriends.length ? (\n          <>\n            {renderFriends}\n            <div className=\"logged-user-friends__last-img-margin-on-mobile\"></div>\n          </>\n        ) : (\n          <span className=\"logged-user-friends__friend-name logged-user-friends__friend-name--no-friend\">\n            Brak znajomych\n          </span>\n        )}\n      </div>\n    </div>\n  );\n};\n\ninterface LoggedUserFriendsProps {\n  loggedUser: {\n    friends: [];\n  };\n  allUsersList: {\n    id: number;\n    name: string;\n    img: string;\n  }[];\n}\n","import React from \"react\";\nimport \"./LoggedUserProfile.scss\";\nimport { LoggedUserFriends } from \"./LoggedUserFriends/LoggedUserFriends\";\n\nexport const LoggedUserProfile: React.FC<LoggedUserProfileProps> = ({\n  loggedUser,\n  allUsersList,\n}) => (\n  <section className=\"logged-user-profile\">\n    <div className=\"logged-user-profile__wrapper-name-img\">\n      <h1 className=\"logged-user-profile__name\">{loggedUser.name}</h1>\n      <div\n        className=\"logged-user-profile__img\"\n        style={{\n          backgroundImage: `url(${loggedUser.img})`,\n        }}\n      ></div>\n    </div>\n    <LoggedUserFriends loggedUser={loggedUser} allUsersList={allUsersList} />\n  </section>\n);\n\ninterface LoggedUserProfileProps {\n  loggedUser: {\n    name: string;\n    img: string;\n    friends: [];\n  };\n  allUsersList: {\n    id: number;\n    isLogged: boolean;\n    name: string;\n    img: string;\n    friends: [];\n  }[];\n}\n","import React from \"react\";\nimport \"./UserToAdd.scss\";\nimport {\n  addUserToFriends,\n  deleteUserFromFriends,\n} from \"./../../../store/actions/userAction\";\nimport { setNotificationBar } from \"../../../store/actions/notificationBarAction\";\n\nexport const UserToAdd: React.FC<UserToAddProps> = ({\n  globalUser,\n  isInLoggedUserList,\n  dispatch,\n}) => (\n  <div className=\"user-to-add__wrapper\">\n    <div\n      className=\"user-to-add__image\"\n      style={{ backgroundImage: `url(${globalUser.img})` }}\n    ></div>\n    <p className=\"user-to-add__name\">{globalUser.name}</p>\n    {isInLoggedUserList ? (\n      <i\n        onClick={() => {\n          dispatch(deleteUserFromFriends(globalUser?.id));\n          dispatch(\n            setNotificationBar(\n              `Usunięto ${globalUser?.name} ze znajomych.`,\n              \"red\"\n            )\n          );\n        }}\n        className=\"fas fa-user-minus user-to-add__icon user-to-add__icon--delete\"\n      ></i>\n    ) : (\n      <i\n        onClick={() => {\n          dispatch(\n            setNotificationBar(\n              `Dodano ${globalUser.name} do znajomych.`,\n              \"green\"\n            )\n          );\n          dispatch(addUserToFriends(globalUser.id));\n        }}\n        className=\"fas fa-user-plus user-to-add__icon user-to-add__icon--add\"\n      ></i>\n    )}\n  </div>\n);\n\ninterface UserToAddProps {\n  globalUser: {\n    id: number;\n    isLogged: boolean;\n    name: string;\n    img: string;\n  };\n  isInLoggedUserList: boolean;\n  dispatch: Function;\n}\n","import React from \"react\";\nimport \"./AllUsersList.scss\";\nimport { useDispatch } from \"react-redux\";\nimport { UserToAdd } from \"./UserToAdd/UserToAdd\";\n\nexport const AllUsersList: React.FC<UsersProps> = ({\n  loggedUser,\n  allUsersList,\n}) => {\n  const dispatch = useDispatch();\n  const getListWithoutLoggedUser = allUsersList.filter(\n    (user) => user.id !== loggedUser.id\n  );\n\n  const renderUsersList = getListWithoutLoggedUser.map((globalUser) => {\n    const isInLoggedUserList = loggedUser.friends.includes(globalUser.id);\n    return (\n      <UserToAdd\n        key={globalUser.id}\n        globalUser={globalUser}\n        isInLoggedUserList={isInLoggedUserList}\n        dispatch={dispatch}\n      />\n    );\n  });\n\n  return <section className=\"all-users-list\">{renderUsersList}</section>;\n};\n\ninterface UsersProps {\n  loggedUser: {\n    id: number;\n    friends: number[];\n  };\n  allUsersList: {\n    id: number;\n    isLogged: boolean;\n    name: string;\n    img: string;\n  }[];\n}\n","import React from \"react\";\nimport \"./RegistrationInputs.scss\";\n\nexport const RegistrationInputs: React.FC<RegistrationInputsProps> = ({\n  labelName,\n  inputValue,\n  setInputValue,\n  security = false,\n  registrationError = false,\n  setLoginError,\n}) => (\n  <>\n    <label className=\"registration__label\">{labelName}</label>\n    <input\n      className={`registration__input       \n      ${security && \"registration__input--security\"}`}\n      type=\"text\"\n      value={inputValue}\n      onChange={(e) => {\n        if (registrationError) setLoginError(false);\n        setInputValue(e.target.value);\n      }}\n    />\n  </>\n);\n\ninterface RegistrationInputsProps {\n  labelName: string;\n  inputValue: string;\n  setInputValue: Function;\n  classModifier?: string;\n  security?: boolean;\n  registrationError?: boolean;\n  setLoginError: Function;\n}\n","import Astronaut from \"./../../images/profile_default_sketchs_png/astronaut.png\";\nimport Astronaut2 from \"./../../images/profile_default_sketchs_png/astronaut2.png\";\nimport Meteor from \"./../../images/profile_default_sketchs_png/meteor.png\";\nimport Moon from \"./../../images/profile_default_sketchs_png/moon.png\";\nimport Planet from \"./../../images/profile_default_sketchs_png/planet.png\";\nimport Rocket from \"./../../images/profile_default_sketchs_png/rocket.png\";\nimport SmallRocket from \"./../../images/profile_default_sketchs_png/small-rocket.png\";\nimport Sonda from \"./../../images/profile_default_sketchs_png/sonda.png\";\nimport Star from \"./../../images/profile_default_sketchs_png/star.png\";\n\nexport const profileSketchs = [\n  Astronaut,\n  Astronaut2,\n  Meteor,\n  Moon,\n  Planet,\n  Rocket,\n  SmallRocket,\n  Sonda,\n  Star,\n];\n\nexport const validation = (\n  login: string,\n  name: string,\n  password: string\n): boolean | string => {\n  const isNumberRegExp = new RegExp(\"[0-9]\", \"g\");\n  const isSpaceRegExp = new RegExp(\" \", \"g\");\n  const spaceInLogin = isSpaceRegExp.test(login);\n  const passwordWithNumbers = isNumberRegExp.test(password);\n  const spaceInPassword = isSpaceRegExp.test(password);\n  const minLoginAndNameLength = 3;\n  const maxLoginAndNameLength = 20;\n  const minPasswordLength = 5;\n\n  if (login === \"\" || name === \"\" || password === \"\") {\n    return \"Uzupełnij wszystkie pola!\";\n  } else if (login.length < minLoginAndNameLength) {\n    return `Login musi mieć co najmniej ${minLoginAndNameLength} znaki.`;\n  } else if (login.length > maxLoginAndNameLength) {\n    return `Login jest za długi (max ${maxLoginAndNameLength} znaków).`;\n  } else if (spaceInLogin) {\n    return `Login nie może posiadać spacji.`;\n  } else if (name.length < minLoginAndNameLength) {\n    return `Nazwa musi mieć co najmniej ${minLoginAndNameLength} znaki.`;\n  } else if (name.length > maxLoginAndNameLength) {\n    return `Nazwa jest za długa (max ${maxLoginAndNameLength} znaków).`;\n  } else if (password.length < minPasswordLength) {\n    return `Hasło musi mieć co najmniej ${minPasswordLength} znaków.`;\n  } else if (!passwordWithNumbers) {\n    return \"Hasło musi zawierać jedną lub więcej cyfr.\";\n  } else if (spaceInPassword) {\n    return \"Hasło nie może posiadać spacji.\";\n  } else return true;\n};\n","import React, { useState } from \"react\";\nimport \"./Registration.scss\";\nimport { RegistrationInputs } from \"./RegistrationInputs/RegistrationInputs\";\nimport { useDispatch } from \"react-redux\";\nimport { addNewRegistredUser } from \"./../../store/actions/usersAction\";\nimport { setLoginUser, setUserDetails } from \"./../../store/actions/userAction\";\nimport { profileSketchs, validation } from \"./RegistrationLogic\";\nimport { setNotificationBar } from \"./../../store/actions/notificationBarAction\";\n\nexport const Registration: React.FC<RegistrationProps> = ({\n  allUsersList,\n  lastUserID,\n}) => {\n  const [loginValue, setLoginValue] = useState(\"\");\n  const [nameValue, setNameValue] = useState(\"\");\n  const [passwordValue, setPasswordValue] = useState(\"\");\n  const [registrationError, setRegistationError] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(\"No message\");\n  const [registrationLoad, setRegistrationLoad] = useState(false);\n  const dispatch = useDispatch();\n\n  if (registrationError && !registrationLoad) setRegistrationLoad(true);\n\n  const handleSubmitRegistration = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    const registrationResult = validation(loginValue, nameValue, passwordValue);\n    const isLoginUsed = allUsersList.findIndex(\n      (user) => user.login === loginValue\n    );\n    if (isLoginUsed === -1) {\n      if (registrationResult === true) {\n        const sketchIndex = Math.floor(Math.random() * profileSketchs.length);\n        const newID = lastUserID + 1;\n        const newUser = {\n          id: newID,\n          login: loginValue,\n          password: passwordValue,\n          isLogged: false,\n          name: nameValue,\n          img: profileSketchs[sketchIndex],\n          friends: [],\n        };\n        dispatch(addNewRegistredUser(newUser));\n        dispatch(\n          setNotificationBar(\n            \"Dziękujemy za rejestrację, miłego explorowania!\",\n            \"green\"\n          )\n        );\n        dispatch(setUserDetails(newUser));\n        dispatch(setLoginUser(true));\n      } else {\n        setRegistationError(true);\n        setErrorMessage(registrationResult as string);\n      }\n    } else {\n      setRegistationError(true);\n      setErrorMessage(\"Login jest już zajęty!\");\n    }\n  };\n\n  return (\n    <section className=\"registration\">\n      <form\n        className=\"registration__form-wrapper\"\n        onSubmit={(e) => handleSubmitRegistration(e)}\n      >\n        <RegistrationInputs\n          labelName=\"Login\"\n          inputValue={loginValue}\n          setInputValue={setLoginValue}\n          registrationError={registrationError}\n          setLoginError={setRegistationError}\n        />\n\n        <RegistrationInputs\n          labelName=\"Wyświetlana nazwa\"\n          inputValue={nameValue}\n          setInputValue={setNameValue}\n          registrationError={registrationError}\n          setLoginError={setRegistationError}\n        />\n\n        <RegistrationInputs\n          labelName=\"Hasło*\"\n          inputValue={passwordValue}\n          setInputValue={setPasswordValue}\n          security={true}\n          registrationError={registrationError}\n          setLoginError={setRegistationError}\n        />\n        <p className=\"registration__info-password\">\n          *Hasło: minimum 5 znaków i przynajmniej jedna cyfra.\n        </p>\n\n        <button className=\"registration__btn\">Zarejestruj się</button>\n      </form>\n      <p\n        className={`registration__error-message ${\n          registrationError\n            ? \"registration__error-message--show\"\n            : registrationLoad\n            ? \"registration__error-message--hide\"\n            : \"\"\n        }`}\n      >\n        {errorMessage}\n      </p>\n      <p className=\"registration__info registration__info--animation\">\n        Rejestracja działa tylko na daną sesję, po odświeżeniu strony wszelkie\n        zmiany zostaną utracone!\n      </p>\n    </section>\n  );\n};\n\nexport interface RegistrationProps {\n  allUsersList: {\n    login: string;\n  }[];\n  lastUserID: number;\n}\n","import { ADD_NEW_REGISTRED_USER, UPDATE_USERS_LIST } from \"./../types\";\n\nexport const addNewRegistredUser = (newUser: NewUser) => ({\n  type: ADD_NEW_REGISTRED_USER,\n  newUser: newUser,\n});\n\nexport const updateUsersList = (list: NewUser[]) => ({\n  type: UPDATE_USERS_LIST,\n  list: list,\n});\n\ninterface NewUser {\n  login: string;\n  password: string;\n  id: number;\n  isLogged: boolean;\n  name: string;\n  img: string;\n  friends: number[];\n}\n","import React, { useEffect } from \"react\";\nimport \"./SubpagesContent.scss\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { Route, Switch, Redirect } from \"react-router-dom\";\nimport { AboutApp } from \"../AboutApp/AboutApp\";\nimport { LoginDesk } from \"../LoginDesk/LoginDesk\";\nimport { Board } from \"../Board/Board\";\nimport { LoggedUserProfile } from \"../LoggedUserProfile/LoggedUserProfile\";\nimport { AllUsersList } from \"../AllUsersList/AllUsersList\";\nimport { Registration } from \"../Registration/Registration\";\nimport { updateUsersList } from \"./../../store/actions/usersAction\";\n\nexport const SubpagesContent: React.FC = () => {\n  const loggedUser = useSelector((state: User) => state.loggedUser);\n  const allUsers = useSelector((state: Users) => state.allUsers);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    const updatedUsersList = allUsers.list.map((user) => {\n      if (user.id === loggedUser.id) {\n        user.friends = loggedUser.friends;\n      }\n      return user;\n    });\n\n    dispatch(updateUsersList(updatedUsersList));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [loggedUser.friends]);\n\n  return (\n    <main className=\"desk\">\n      <Switch>\n        <Route\n          path=\"/\"\n          exact\n          render={() => <AboutApp loggedUser={loggedUser} />}\n        />\n\n        <Route\n          path=\"/profile\"\n          render={() =>\n            loggedUser.isLogged ? (\n              <LoggedUserProfile\n                loggedUser={loggedUser}\n                allUsersList={allUsers.list}\n              />\n            ) : (\n              <Redirect to=\"/login\" />\n            )\n          }\n        />\n\n        <Route\n          path=\"/board\"\n          render={() => (\n            <Board loggedUser={loggedUser} allUsersList={allUsers.list} />\n          )}\n        />\n\n        <Route\n          path=\"/users\"\n          render={() =>\n            loggedUser.isLogged ? (\n              <AllUsersList\n                loggedUser={loggedUser}\n                allUsersList={allUsers.list}\n              />\n            ) : (\n              <Redirect to=\"/login\" />\n            )\n          }\n        />\n\n        <Route\n          path=\"/login\"\n          render={() =>\n            loggedUser.isLogged ? (\n              <Redirect to=\"/\" />\n            ) : (\n              <LoginDesk allUsersList={allUsers.list} />\n            )\n          }\n        />\n\n        <Route\n          path=\"/registration\"\n          render={() =>\n            loggedUser.isLogged ? (\n              <Redirect to=\"/\" />\n            ) : (\n              <Registration\n                allUsersList={allUsers.list}\n                lastUserID={allUsers.lastUserID}\n              />\n            )\n          }\n        />\n\n        <Route component={() => <div style={{ color: \"white\" }}>BŁĄD</div>} />\n      </Switch>\n    </main>\n  );\n};\n\ninterface User {\n  loggedUser: {\n    id: number;\n    isLogged: boolean;\n    name: string;\n    img: string;\n    friends: [];\n  };\n}\n\ninterface Users {\n  allUsers: {\n    list: {\n      login: string;\n      password: string;\n      id: number;\n      isLogged: boolean;\n      name: string;\n      img: string;\n      friends: [];\n    }[];\n    lastUserID: number;\n  };\n}\n","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { hideMenu, showMenu } from \"./../../store/actions/menuAction\";\nimport \"./MenuIcon.scss\";\n\nexport const MenuIcon: React.FC = () => {\n  const menuVisibility = useSelector((state: Menu) => state.menu.visibility);\n  const dispatch = useDispatch();\n\n  const topAnimation = menuVisibility\n    ? \"menu-icon__bar--top-animation\"\n    : \"menu-icon__bar--top-animationBack\";\n  const centerAnimation = menuVisibility\n    ? \"menu-icon__bar--center-animation\"\n    : \"\";\n  const bottomAnimation = menuVisibility\n    ? \"menu-icon__bar--bottom-animation\"\n    : \"menu-icon__bar--bottom-animationBack\";\n\n  return (\n    <div\n      className=\"menu-icon\"\n      onClick={() => {\n        if (menuVisibility) dispatch(hideMenu());\n        else dispatch(showMenu());\n      }}\n    >\n      <span\n        className={`menu-icon__bar menu-icon__bar--top ${topAnimation}`}\n      ></span>\n      <span\n        className={`menu-icon__bar menu-icon__bar--center ${centerAnimation}`}\n      ></span>\n      <span\n        className={`menu-icon__bar menu-icon__bar--bottom ${bottomAnimation}`}\n      ></span>\n    </div>\n  );\n};\n\ninterface Menu {\n  menu: {\n    visibility: boolean;\n  };\n}\n","import { HIDE_MENU, SHOW_MENU } from \"./../types\";\n\nexport const showMenu = () => {\n  return {\n    type: SHOW_MENU,\n    visibility: true,\n  };\n};\n\nexport const hideMenu = () => {\n  return {\n    type: HIDE_MENU,\n    visibility: false,\n  };\n};\n","import React, { useState } from \"react\";\nimport \"./Menu.scss\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport SpaceBG from \"./../../images/space-bg.jpg\";\nimport { NavLink } from \"react-router-dom\";\nimport { hideMenu } from \"./../../store/actions/menuAction\";\nimport {\n  setLoginUser,\n  resetUserDetails,\n} from \"./../../store/actions/userAction\";\n\nconst spaceBgImage = { backgroundImage: `url(${SpaceBG})` };\n\nexport const Menu: React.FC = () => {\n  const dispatch = useDispatch();\n  const menuVisibility = useSelector((state: Menu) => state.menu.visibility);\n  const userIsLogged = useSelector((state: User) => state.loggedUser.isLogged);\n  const [menuLoad, setMenuLoad] = useState(false);\n  const animation = menuVisibility ? \"menu--show\" : \"menu--hide\";\n\n  if (menuVisibility && !menuLoad) setMenuLoad(true);\n\n  return (\n    <nav className={`menu ${menuLoad ? animation : \"\"}`} style={spaceBgImage}>\n      <ul className=\"menu__container\">\n        <NavLink\n          className=\"menu__link\"\n          to=\"/\"\n          exact\n          onClick={() => dispatch(hideMenu())}\n        >\n          O aplikacji\n        </NavLink>\n\n        {userIsLogged ? (\n          <NavLink\n            className=\"menu__link\"\n            to=\"/profile\"\n            onClick={() => dispatch(hideMenu())}\n          >\n            Profil\n          </NavLink>\n        ) : null}\n\n        <NavLink\n          className=\"menu__link\"\n          to=\"/board\"\n          onClick={() => dispatch(hideMenu())}\n        >\n          Tablica\n        </NavLink>\n\n        {userIsLogged ? (\n          <NavLink\n            className=\"menu__link\"\n            to=\"/users\"\n            onClick={() => dispatch(hideMenu())}\n          >\n            Użytkownicy\n          </NavLink>\n        ) : null}\n\n        {userIsLogged ? (\n          <NavLink\n            className=\"menu__link\"\n            to=\"/login\"\n            onClick={() => {\n              dispatch(hideMenu());\n              dispatch(setLoginUser(false));\n              dispatch(resetUserDetails());\n            }}\n          >\n            Wyloguj\n          </NavLink>\n        ) : (\n          <NavLink\n            className=\"menu__link\"\n            to=\"/login\"\n            onClick={() => dispatch(hideMenu())}\n          >\n            Logowanie\n          </NavLink>\n        )}\n\n        {userIsLogged ? null : (\n          <NavLink\n            className=\"menu__link\"\n            to=\"/registration\"\n            onClick={() => dispatch(hideMenu())}\n          >\n            Rejestracja\n          </NavLink>\n        )}\n      </ul>\n    </nav>\n  );\n};\n\ninterface Menu {\n  menu: {\n    visibility: boolean;\n  };\n}\n\ninterface User {\n  loggedUser: {\n    isLogged: boolean;\n  };\n}\n","import React from \"react\";\nimport \"./NotificationBar.scss\";\n\nexport const NotificationBar: React.FC<NotificationBarProps> = ({\n  messageText,\n  colorBar = \"green\",\n}) => (\n  <div\n    className={`notification-bar notification-bar--${colorBar} notification-bar--animation`}\n  >\n    <p className=\"notification-bar__message\">{messageText}</p>\n  </div>\n);\n\ninterface NotificationBarProps {\n  messageText: string;\n  colorBar: string;\n}\n","import React, { useEffect } from \"react\";\nimport \"./Notifications.scss\";\nimport { NotificationBar } from \"./NotificationBar/NotificationBar\";\nimport { useDispatch } from \"react-redux\";\nimport { deleteNotifications } from \"./../../store/actions/notificationBarAction\";\n\nexport const Notifications: React.FC<NotificationsProps> = ({\n  notificationList,\n}) => {\n  const dispatch = useDispatch();\n  useEffect(() => {\n    if (notificationList.length > 0) {\n      const timeIndex = setTimeout(() => {\n        dispatch(deleteNotifications());\n      }, 2500);\n      return () => clearTimeout(timeIndex);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [notificationList.length]);\n\n  const renderNotifications = notificationList.map(\n    ({ messageText, colorBar }, index) => (\n      <NotificationBar\n        key={index}\n        messageText={messageText}\n        colorBar={colorBar}\n      />\n    )\n  );\n\n  return <div className=\"notifications\">{renderNotifications}</div>;\n};\n\ninterface NotificationsProps {\n  notificationList: {\n    messageText: string;\n    colorBar: string;\n    animation: boolean;\n  }[];\n}\n","import React from \"react\";\nimport SpaceBG from \"./images/space-bg2.jpg\";\nimport \"./App.scss\";\nimport { Logo } from \"./components/Logo/Logo\";\nimport { SubpagesContent } from \"./components/SubpagesContent/SubpagesContent\";\nimport { MenuIcon } from \"./components/MenuIcon/MenuIcon\";\nimport { Menu } from \"./components/Menu/Menu\";\nimport { useSelector } from \"react-redux\";\nimport { Notifications } from \"./components/Notifications/Notifications\";\n\nconst spaceBgImage = { backgroundImage: `url(${SpaceBG})` };\n\nexport const App = () => {\n  const notificationList = useSelector(\n    (state: Notification) => state.notificationBar.notificationList\n  );\n\n  return (\n    <div className=\"app\" style={spaceBgImage}>\n      <MenuIcon />\n      <Logo />\n      <SubpagesContent />\n      <Menu />\n      <Notifications notificationList={notificationList} />\n    </div>\n  );\n};\n\ninterface Notification {\n  notificationBar: {\n    notificationList: {\n      messageText: string;\n      colorBar: string;\n      animation: boolean;\n    }[];\n  };\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { HIDE_MENU, SHOW_MENU } from \"./../types\";\n\nconst INITIAL_STATE = {\n  visibility: false,\n};\n\nexport const menuReducer = (state = INITIAL_STATE, action: Action) => {\n  switch (action.type) {\n    case SHOW_MENU:\n      return { ...state, visibility: action.visibility };\n    case HIDE_MENU:\n      return { ...state, visibility: action.visibility };\n    default:\n      return state;\n  }\n};\n\ninterface Action {\n  type: string;\n  visibility: boolean;\n}\n","import {\n  SET_LOGIN_USER,\n  SET_USER_DETAILS,\n  RESET_USER_DETAILS,\n  ADD_USER_TO_FRIENDS,\n  DELETE_USER_FROM_FRIENDS,\n} from \"./../types\";\n\nconst INITIAL_STATE = {\n  id: -1,\n  isLogged: false,\n  name: \"Nieznajomy\",\n  img: \"\",\n  friends: [],\n};\n\nexport const userReducer = (state = INITIAL_STATE, action: Action) => {\n  switch (action.type) {\n    case SET_LOGIN_USER:\n      return {\n        ...state,\n        isLogged: action.isLogged,\n      };\n    case SET_USER_DETAILS:\n      return {\n        ...state,\n        id: action.id,\n        name: action.name,\n        img: action.img,\n        friends: action.friends,\n      };\n    case RESET_USER_DETAILS:\n      return {\n        ...state,\n        ...INITIAL_STATE,\n      };\n    case ADD_USER_TO_FRIENDS:\n      return {\n        ...state,\n        friends: [...state.friends, action.newFriendID],\n      };\n    case DELETE_USER_FROM_FRIENDS:\n      const listWithoutDeletedFriend = state.friends.filter(\n        (friend) => friend !== action.friendToDeleteID\n      );\n      return {\n        ...state,\n        friends: listWithoutDeletedFriend,\n      };\n    default:\n      return state;\n  }\n};\n\ninterface Action {\n  type: string;\n  id: number;\n  isLogged: boolean;\n  name: string;\n  img: string;\n  friends: number[];\n  newFriendID: number;\n  friendToDeleteID: number;\n}\n","import { ADD_NEW_REGISTRED_USER, UPDATE_USERS_LIST } from \"./../types\";\nimport TEMP_ACC from \"./../../accounts.json\";\n\nconst INITAL_STATE = {\n  list: TEMP_ACC.accounts,\n  lastUserID: TEMP_ACC.accounts.length - 1,\n};\n\nexport const usersReducer = (state = INITAL_STATE, action: Action) => {\n  switch (action.type) {\n    case ADD_NEW_REGISTRED_USER:\n      return {\n        ...state,\n        list: [...state.list, action.newUser],\n        lastUserID: action.newUser.id,\n      };\n    case UPDATE_USERS_LIST:\n      return {\n        ...state,\n        list: action.list,\n      };\n    default:\n      return state;\n  }\n};\n\ninterface Action {\n  type: string;\n  newUser: {\n    id: number;\n    login: string;\n    password: string;\n    name: string;\n    img: string;\n    friends: number[];\n  };\n  list: {\n    id: number;\n    login: string;\n    password: string;\n    isLogged: boolean;\n    name: string;\n    img: string;\n    friends: number[];\n  }[];\n}\n","import { ADD_GLOBAL_MESSAGE } from \"./../types\";\nimport TEMP_MESS from \"./../../messages.json\";\n\nconst INITAL_STATE = {\n  globalMessages: TEMP_MESS.messages,\n};\n\nexport const messageReducer = (state = INITAL_STATE, action: Action) => {\n  switch (action.type) {\n    case ADD_GLOBAL_MESSAGE:\n      return {\n        ...state,\n        globalMessages: [...state.globalMessages, action.newMessage],\n      };\n    default:\n      return state;\n  }\n};\n\ninterface Action {\n  type: string;\n  newMessage: {\n    userID: number;\n    text: string;\n    time: string;\n    date: string;\n  };\n}\n","import { SET_NOTIFICATION_BAR, DELETE_NOTIFICATIONS } from \"./../types\";\n\nconst INITIAL_STATE = {\n  notificationList: [],\n};\n\nexport const notificationBarReducer = (\n  state = INITIAL_STATE,\n  action: Action\n) => {\n  switch (action.type) {\n    case SET_NOTIFICATION_BAR:\n      return {\n        ...state,\n        notificationList: [\n          ...state.notificationList,\n          {\n            messageText: action.messageText,\n            colorBar: action.colorBar,\n            animation: action.animation,\n          },\n        ],\n      };\n    case DELETE_NOTIFICATIONS:\n      return {\n        notificationList: action.notificationList,\n      };\n    default:\n      return state;\n  }\n};\n\ninterface Action {\n  type: string;\n  messageText: string;\n  colorBar: string;\n  animation: boolean;\n  notificationList: [];\n}\n","import { combineReducers } from \"redux\";\nimport { menuReducer } from \"./menuReducer\";\nimport { userReducer } from \"./userReducer\";\nimport { usersReducer } from \"./usersReducer\";\nimport { messageReducer } from \"./messagesReducer\";\nimport { notificationBarReducer } from \"./notificationBarReducer\";\n\nexport const rootReducer = combineReducers({\n  menu: menuReducer,\n  loggedUser: userReducer,\n  allUsers: usersReducer,\n  messages: messageReducer,\n  notificationBar: notificationBarReducer,\n});\n","import { createStore } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport { rootReducer } from \"./reducers/\";\n\nexport const store = createStore(rootReducer, composeWithDevTools());\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport { App } from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./store\";\nimport { HashRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter basename=\"/\">\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}