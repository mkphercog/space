{"version":3,"sources":["images/space-bg2.jpg","images/profile_default_sketchs_png/astronaut.png","images/profile_default_sketchs_png/astronaut2.png","images/profile_default_sketchs_png/meteor.png","images/profile_default_sketchs_png/moon.png","images/profile_default_sketchs_png/planet.png","images/profile_default_sketchs_png/rocket.png","images/profile_default_sketchs_png/small-rocket.png","images/profile_default_sketchs_png/sonda.png","images/profile_default_sketchs_png/star.png","images/space-bg.jpg","components/Notifications/NotificationBar/NotificationBar.tsx","components/Header/HeaderContent.tsx","components/Header/Header.tsx","components/AboutApp/AboutAppDesc.ts","components/AboutApp/AboutApp.tsx","store/actions/userAction.ts","store/types/index.ts","components/LoginDesk/LoginInputs/LoginInputs.tsx","components/LoginDesk/LoginDesk.tsx","components/LoginDesk/LoginLogic.ts","store/actions/notificationBarAction.ts","components/Board/Messages/Messages.tsx","store/actions/messagesAction.ts","components/Board/NoLogged/NoLogged.tsx","components/Board/AddNewMessage/AddNewMessage.tsx","components/Board/Board.tsx","components/LoggedUserProfile/LoggedUserFriends/LoggedUserFriends.tsx","components/LoggedUserProfile/LoggedUserProfile.tsx","components/AllUsersList/UserToAdd/UserToAdd.tsx","components/AllUsersList/AllUsersList.tsx","components/Registration/RegistrationInputs/RegistrationInputs.tsx","components/Registration/RegistrationLogic.ts","components/Registration/YearSelect/YearSelect.tsx","components/Registration/SexCheck/SexCheck.tsx","components/Registration/Registration.tsx","store/actions/usersAction.ts","components/PathError/PathError.tsx","components/GlobalUserProfile/GlobalUserFriends/GlobalUserFriends.tsx","components/GlobalUserProfile/GlobalUserImgName/GlobalUserImgName.tsx","components/GlobalUserProfile/GlobalUserLocalNav/GlobalUserLocalNav.tsx","components/GlobalUserProfile/GlobalUserProfile.tsx","components/SubpagesContent/SubpagesContent.tsx","components/MenuIcon/MenuIcon.tsx","store/actions/menuAction.ts","components/Menu/Menu.tsx","components/Notifications/Notifications.tsx","components/ProfileShortcut/ProfileShortcut.tsx","App.tsx","serviceWorker.ts","store/reducers/menuReducer.ts","store/reducers/userReducer.ts","store/reducers/usersReducer.ts","store/reducers/messagesReducer.ts","store/reducers/notificationBarReducer.ts","store/reducers/index.ts","store/index.ts","index.tsx"],"names":["module","exports","NotificationColors","SpaceRocketLogo","className","Profile","Board","Users","Login","Registration","ErrorPath","Header","path","exact","component","unloggedDesc","welcomeUnlogged","likeSocialMedia","letsTestIt","notSave","AboutApp","loggedUser","name","isLogged","to","setLoginUser","type","setUserDetails","id","img","friends","details","birthYear","homeTown","sex","addUserToFriends","newFriendID","deleteUserFromFriends","friendToDeleteID","LoginInputs","labelName","inputValue","setInputValue","security","classError","setLoginError","value","onChange","e","target","LoginDesk","allUsersList","useState","loginValue","setLoginValue","passwordValue","setPasswordValue","loginError","loginLoad","setLoginLoad","dispatch","useDispatch","handleSubmitLogin","preventDefault","loginResult","login","password","findUser","find","user","isCorrectPassword","tryToLog","onSubmit","setNotificationBar","messageText","colorBar","NotificationBar","green","Messages","messTemp","useSelector","state","messages","globalMessages","loggedUserID","useEffect","messageWrap","document","getElementById","scrollTo","scrollHeight","scrollDown","length","renderMessages","map","mess","index","key","style","backgroundImage","userID","date","time","text","onClick","likes","includes","dislikes","messageID","likeMessageDelete","red","likeMessage","dislikeMessageDelete","dislikeMessage","NoLogged","AddNewMessage","messageValue","setMessageValue","lastMessageID","messageTime","Date","toLocaleTimeString","messageDate","toLocaleDateString","dayDotIndex","indexOf","newMessage","handleSubmitMessage","placeholder","LoggedUserFriends","history","useHistory","renderFriends","friendID","friend","push","LoggedUserProfile","userAge","getFullYear","Number","render","UserToAdd","globalUser","isInLoggedUserList","AllUsersList","searchValue","setSearchValue","renderUsersList","filter","toUpperCase","RegistrationInputs","registrationError","profileSketchs","Astronaut","Astronaut2","Meteor","Moon","Planet","Rocket","SmallRocket","Sonda","Star","YearSelect","renderOptions","yearValue","setYearValue","getYears","year","SexCheck","setSex","checked","lastUserID","nameValue","setNameValue","setRegistationError","errorMessage","setErrorMessage","registrationLoad","setRegistrationLoad","setHomeTown","handleSubmitRegistration","registrationResult","isNumberRegExp","RegExp","isSpaceRegExp","spaceInLogin","test","passwordWithNumbers","spaceInPassword","validation","findIndex","sketchIndex","Math","floor","random","userSex","newUser","addNewRegistredUser","when","message","PathError","pathHistory","GlobalUserFriends","friendsList","GlobalUserImgName","globalUserDetails","GlobalUserLocalNav","isInFriendLoggedUser","GlobalUserProfile","params","animation","setAnimation","isUserIdGlobal","timerIndex","setTimeout","clearTimeout","SubpagesContent","allUsers","updatedUsersList","list","props","match","MenuIcon","menuVisibility","menu","visibility","topAnimation","centerAnimation","bottomAnimation","spaceBgImage","SpaceBG","Menu","userIsLogged","menuLoad","setMenuLoad","notificationList","rel","href","Notifications","timeIndex","renderNotifications","ProfileShortcut","App","notificationBar","Boolean","window","location","hostname","INITIAL_STATE","INITAL_STATE","TEMP_ACC","accounts","TEMP_MESS","rootReducer","combineReducers","action","listWithoutDeletedFriend","likedMess","likedMessDelete","like","dislikedMess","dislikedMessDelete","dislike","store","createStore","composeWithDevTools","ReactDOM","StrictMode","basename","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.4c422a76.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/space-bg2.b22799e8.jpg\";","module.exports = __webpack_public_path__ + \"static/media/astronaut.ebfd8ed5.png\";","module.exports = __webpack_public_path__ + \"static/media/astronaut2.e346f1ac.png\";","module.exports = __webpack_public_path__ + \"static/media/meteor.8bb01bd9.png\";","module.exports = __webpack_public_path__ + \"static/media/moon.0daa6980.png\";","module.exports = __webpack_public_path__ + \"static/media/planet.3f94a447.png\";","module.exports = __webpack_public_path__ + \"static/media/rocket.2209fb3e.png\";","module.exports = __webpack_public_path__ + \"static/media/small-rocket.063f25b5.png\";","module.exports = __webpack_public_path__ + \"static/media/sonda.da77f66c.png\";","module.exports = __webpack_public_path__ + \"static/media/star.9d29d1bc.png\";","module.exports = __webpack_public_path__ + \"static/media/space-bg.2c7ebd72.jpg\";","import React from \"react\";\nimport \"./NotificationBar.scss\";\n\nexport enum NotificationColors {\n  green = \"green\",\n  red = \"red\",\n}\n\nexport const NotificationBar: React.FC<NotificationBarProps> = ({\n  messageText,\n  colorBar = NotificationColors.green,\n}) => (\n  <div\n    className={`notification-bar notification-bar--${colorBar} notification-bar--animation`}\n  >\n    <p className=\"notification-bar__message\">{messageText}</p>\n  </div>\n);\n\ninterface NotificationBarProps {\n  messageText: string;\n  colorBar: NotificationColors;\n}\n","import React from \"react\";\n\nexport const SpaceRocketLogo = () => (\n  <p className=\"header__desc\">\n    Space<i className=\"header__rocket fas fa-space-shuttle\"></i>\n  </p>\n);\nexport const Profile = () => <p className=\"header__desc\">Profil</p>;\nexport const Board = () => <p className=\"header__desc\">Tablica</p>;\nexport const Users = () => <p className=\"header__desc\">Użytkownicy</p>;\nexport const Login = () => <p className=\"header__desc\">Logowanie</p>;\nexport const Registration = () => <p className=\"header__desc\">Rejestracja</p>;\nexport const ErrorPath = () => <p className=\"header__desc\">Error</p>;\n","import React from \"react\";\nimport \"./Header.scss\";\nimport { Switch, Route } from \"react-router-dom\";\nimport {\n  SpaceRocketLogo,\n  Login,\n  Board,\n  ErrorPath,\n  Profile,\n  Registration,\n  Users,\n} from \"./HeaderContent\";\n\nexport const Header: React.FC = () => (\n  <header className=\"header\">\n    <Switch>\n      <Route path=\"/\" exact component={SpaceRocketLogo} />\n      <Route path=\"/profile\" component={Profile} />\n      <Route path=\"/board\" component={Board} />\n      <Route path=\"/users\" component={Users} />\n      <Route path=\"/login\" component={Login} />\n      <Route path=\"/registration\" component={Registration} />\n      <Route component={ErrorPath} />\n    </Switch>\n  </header>\n);\n","export const loggedDesc = {\n  welcomeLogged: \"Cieszymy się, że jesteś z nami!\",\n};\n\nexport const unloggedDesc = {\n  welcomeUnlogged:\n    \"Space to przestrzeń dla Ciebie i Twoich znajomych! Zaloguj się aby zarządzać listą znajomych, sprawdzić tablicę aktualności czy odpisać na komentarz znajomego.\",\n  likeSocialMedia: `Aktualnie aplikacja jest swego rodzaju stymulacją prawdziwej strony\n   social media.`,\n  letsTestIt: `Chcesz wytestować aplikację? Zarejestruj się w zakładce rejestracja, lub kliknij przycisk poniżej.`,\n  notSave: \"Pamiętaj że, wszelkie zmiany nie zostaną zapisane.\",\n};\n","import React from \"react\";\nimport \"./AboutApp.scss\";\nimport { loggedDesc, unloggedDesc } from \"./AboutAppDesc\";\nimport { NavLink } from \"react-router-dom\";\n\nconst { welcomeLogged } = loggedDesc;\nconst { welcomeUnlogged, likeSocialMedia, letsTestIt, notSave } = unloggedDesc;\n\nexport const AboutApp: React.FC<AboutAppProps> = ({ loggedUser }) => (\n  <section className=\"about-app\">\n    <h1 className=\"about-app__title\"> Witaj, {loggedUser.name}!</h1>\n    <p className=\"about-app__desc\">\n      {loggedUser.isLogged ? welcomeLogged : welcomeUnlogged}\n    </p>\n    <p className=\"about-app__desc\">{likeSocialMedia}</p>\n    <p className=\"about-app__desc\">{loggedUser.isLogged ? null : letsTestIt}</p>\n    {loggedUser.isLogged ? null : (\n      <NavLink className=\"about-app__registration-link\" to=\"/registration\">\n        Przejdź do rejestracji\n      </NavLink>\n    )}\n    <p className=\"about-app__desc\">{notSave}</p>\n  </section>\n);\n\ninterface AboutAppProps {\n  loggedUser: {\n    isLogged: boolean;\n    name: string;\n  };\n}\n","import {\n  SET_LOGIN_USER,\n  SET_USER_DETAILS,\n  RESET_USER_DETAILS,\n  ADD_USER_TO_FRIENDS,\n  DELETE_USER_FROM_FRIENDS,\n} from \"./../types\";\n\nexport const setLoginUser = (isLogged: boolean) => ({\n  type: SET_LOGIN_USER,\n  isLogged: isLogged,\n});\n\nexport const setUserDetails = ({ id, name, img, friends, details }: User) => ({\n  type: SET_USER_DETAILS,\n  id: id,\n  name: name,\n  img: img,\n  friends: friends,\n  birthYear: details.birthYear,\n  homeTown: details.homeTown,\n  sex: details.sex,\n});\n\nexport const resetUserDetails = () => ({\n  type: RESET_USER_DETAILS,\n});\n\nexport const addUserToFriends = (newFriendID: number) => ({\n  type: ADD_USER_TO_FRIENDS,\n  newFriendID: newFriendID,\n});\n\nexport const deleteUserFromFriends = (friendToDeleteID: number = -1) => ({\n  type: DELETE_USER_FROM_FRIENDS,\n  friendToDeleteID: friendToDeleteID,\n});\n\ninterface User {\n  id: number;\n  name: string;\n  img: string;\n  friends: number[];\n  details: {\n    birthYear: number;\n    homeTown: string;\n    sex: string;\n  };\n}\n","export const SHOW_MENU = \"SHOW_MENU\";\nexport const HIDE_MENU = \"HIDE_MENU\";\n\nexport const SET_LOGIN_USER = \"SET_LOGIN_USER\";\nexport const SET_USER_DETAILS = \"SET_USER_DETAILS\";\nexport const ADD_USER_TO_FRIENDS = \"ADD_USER_TO_FRIENDS\";\nexport const DELETE_USER_FROM_FRIENDS = \"DELETE_USER_FROM_FRIENDS\";\nexport const RESET_USER_DETAILS = \"RESET_USER_DETAILS\";\n\nexport const ADD_GLOBAL_MESSAGE = \"ADD_GLOBAL_MESSAGE\";\nexport const LIKE_MESSAGE = \"LIKE_MESSAGE\";\nexport const DISLIKE_MESSAGE = \"DISLIKE_MESSAGE\";\nexport const LIKE_MESSAGE_DELETE = \"LIKE_MESSAGE_DELETE\";\nexport const DISLIKE_MESSAGE_DELETE = \"DISLIKE_MESSAGE_DELETE\";\n\nexport const ADD_NEW_REGISTRED_USER = \"ADD_NEW_REGISTRED_USER\";\nexport const UPDATE_USERS_LIST = \"UPDATE_USERS_LIST\";\n\nexport const SET_NOTIFICATION_BAR = \"SET_NOTIFICATION_BAR\";\nexport const DELETE_NOTIFICATIONS = \"DELETE_NOTIFICATIONS\";\n","import React from \"react\";\nimport \"./LoginInputs.scss\";\n\nexport const LoginInputs: React.FC<LoginInputsProps> = ({\n  labelName,\n  inputValue,\n  setInputValue,\n  security = false,\n  classError = false,\n  setLoginError,\n}) => (\n  <>\n    <label className=\"login-desk__label\">{labelName}</label>\n    <input\n      className={`login-desk__input \n      ${security && \"login-desk__input--security\"} \n      ${classError && \"login-desk__input--error\"}`}\n      type=\"text\"\n      value={inputValue}\n      onChange={(e) => {\n        if (classError) setLoginError(false);\n        setInputValue(e.target.value);\n      }}\n    />\n  </>\n);\n\ninterface LoginInputsProps {\n  labelName: string;\n  inputValue: string;\n  setInputValue: Function;\n  security?: boolean;\n  classError?: boolean;\n  setLoginError: Function;\n}\n","import React, { useState } from \"react\";\nimport \"./LoginDesk.scss\";\nimport { useDispatch } from \"react-redux\";\nimport { tryToLog } from \"./LoginLogic\";\nimport { LoginInputs } from \"./LoginInputs/LoginInputs\";\nimport { NavLink } from \"react-router-dom\";\n\nexport const LoginDesk: React.FC<LoginDeskProps> = ({ allUsersList }) => {\n  const [loginValue, setLoginValue] = useState(\"\");\n  const [passwordValue, setPasswordValue] = useState(\"\");\n  const [loginError, setLoginError] = useState(false);\n  const [loginLoad, setLoginLoad] = useState(false);\n  const dispatch = useDispatch();\n\n  if (loginError && !loginLoad) setLoginLoad(true);\n\n  const handleSubmitLogin = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    const loginResult = tryToLog(\n      allUsersList,\n      loginValue,\n      passwordValue,\n      dispatch\n    );\n    setLoginError(!loginResult);\n  };\n\n  return (\n    <section className=\"login-desk\">\n      <form\n        className=\"login-desk__wrapper\"\n        onSubmit={(e) => {\n          handleSubmitLogin(e);\n        }}\n      >\n        <LoginInputs\n          labelName=\"Login\"\n          inputValue={loginValue}\n          setInputValue={setLoginValue}\n          classError={loginError}\n          setLoginError={setLoginError}\n        />\n        <LoginInputs\n          labelName=\"Hasło\"\n          inputValue={passwordValue}\n          setInputValue={setPasswordValue}\n          security={true}\n          classError={loginError}\n          setLoginError={setLoginError}\n        />\n        <button className=\"login-desk__btn\">Zaloguj się</button>\n      </form>\n      <p\n        className={`login-desk__error-message ${\n          loginError\n            ? \"login-desk__error-message--show\"\n            : loginLoad\n            ? \"login-desk__error-message--hide\"\n            : \"\"\n        }`}\n      >\n        Błąd logowania, spróbuj ponownie.\n      </p>\n      <NavLink className=\"login-desk__registration-link\" to=\"/registration\">\n        Nie masz konta? Zarejestruj się tutaj.\n      </NavLink>\n    </section>\n  );\n};\n\nexport interface LoginDeskProps {\n  allUsersList: {\n    login: string;\n    password: string;\n    id: number;\n    isLogged: boolean;\n    name: string;\n    img: string;\n    friends: number[];\n    details: {\n      birthYear: number;\n      homeTown: string;\n      sex: string;\n    };\n  }[];\n}\n","import { setLoginUser, setUserDetails } from \"./../../store/actions/userAction\";\n\nexport const tryToLog = (\n  allUsersList: Users,\n  login: string,\n  password: string,\n  dispatch: Function\n): boolean => {\n  const findUser = allUsersList.find((user) => user.login === login);\n  const isCorrectPassword = findUser?.password === password;\n  if (findUser && isCorrectPassword) {\n    dispatch(setUserDetails(findUser));\n    dispatch(setLoginUser(isCorrectPassword));\n  }\n  return isCorrectPassword;\n};\n\ntype Users = {\n  login: string;\n  password: string;\n  id: number;\n  isLogged: boolean;\n  name: string;\n  img: string;\n  friends: number[];\n  details: {\n    birthYear: number;\n    homeTown: string;\n    sex: string;\n  };\n}[];\n","import { SET_NOTIFICATION_BAR, DELETE_NOTIFICATIONS } from \"./../types\";\nimport { NotificationColors } from \"./../../components/Notifications/NotificationBar/NotificationBar\";\n\nexport const setNotificationBar = (\n  messageText: string,\n  colorBar: NotificationColors\n) => ({\n  type: SET_NOTIFICATION_BAR,\n  messageText: messageText,\n  colorBar: colorBar,\n});\n\nexport const deleteNotifications = () => ({\n  type: DELETE_NOTIFICATIONS,\n  notificationList: [],\n});\n","import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport \"./Messages.scss\";\nimport {\n  likeMessage,\n  dislikeMessage,\n  likeMessageDelete,\n  dislikeMessageDelete,\n} from \"./../../../store/actions/messagesAction\";\nimport { setNotificationBar } from \"../../../store/actions/notificationBarAction\";\nimport { NotificationColors } from \"./../../Notifications/NotificationBar/NotificationBar\";\n\nconst scrollDown = () => {\n  const messageWrap = document.getElementById(\"messages__wrapper\");\n  messageWrap?.scrollTo(0, messageWrap.scrollHeight);\n};\n\nexport const Messages: React.FC<MessagesProps> = ({ allUsersList }) => {\n  const dispatch = useDispatch();\n  const messTemp = useSelector(\n    (state: Messages) => state.messages.globalMessages\n  );\n  const loggedUserID = useSelector(\n    (state: LoggedUserID) => state.loggedUser.id\n  );\n\n  useEffect(() => {\n    scrollDown();\n  }, [messTemp.length]);\n\n  const renderMessages = messTemp.map((mess, index) => (\n    <div key={index} className=\"message\">\n      <div className=\"message__wrapperIMG\">\n        <div\n          className=\"message__img\"\n          style={{ backgroundImage: `url(${allUsersList[mess.userID].img})` }}\n        ></div>\n        <p className=\"message__user-name\">{allUsersList[mess.userID].name}</p>\n        <p className=\"message__time-and-date\">{`${mess.date} ${mess.time}`}</p>\n      </div>\n      <p className=\"message__text\">{mess.text}</p>\n      <div className=\"message__likes-dislikes\">\n        <span className=\"message__likes\">\n          <i\n            className=\"fas fa-thumbs-up\"\n            onClick={() => {\n              if (\n                !mess.likes.includes(loggedUserID) &&\n                !mess.dislikes.includes(loggedUserID)\n              ) {\n                dispatch(likeMessage(mess.messageID, loggedUserID));\n              } else if (mess.likes.includes(loggedUserID)) {\n                dispatch(likeMessageDelete(mess.messageID, loggedUserID));\n              } else if (mess.dislikes.includes(loggedUserID)) {\n                dispatch(\n                  setNotificationBar(\n                    \"Zareagowałeś już negatywnie na tego posta!\",\n                    NotificationColors.red\n                  )\n                );\n              }\n            }}\n          ></i>\n          {mess.likes.length}\n        </span>\n        <span className=\"message__dislikes\">\n          <i\n            className=\"fas fa-thumbs-down\"\n            onClick={() => {\n              if (\n                !mess.likes.includes(loggedUserID) &&\n                !mess.dislikes.includes(loggedUserID)\n              ) {\n                dispatch(dislikeMessage(mess.messageID, loggedUserID));\n              } else if (mess.dislikes.includes(loggedUserID)) {\n                dispatch(dislikeMessageDelete(mess.messageID, loggedUserID));\n              } else if (mess.likes.includes(loggedUserID)) {\n                dispatch(\n                  setNotificationBar(\n                    \"Zareagowałeś już pozytywnie na tego posta!\",\n                    NotificationColors.green\n                  )\n                );\n              }\n            }}\n          ></i>\n          {mess.dislikes.length}\n        </span>\n      </div>\n    </div>\n  ));\n\n  return (\n    <div className=\"messages__wrapper\" id=\"messages__wrapper\">\n      {renderMessages}\n    </div>\n  );\n};\n\ninterface MessagesProps {\n  allUsersList: {\n    id: number;\n    isLogged: boolean;\n    name: string;\n    img: string;\n    friends: number[];\n  }[];\n}\n\ninterface Messages {\n  messages: {\n    globalMessages: {\n      messageID: number;\n      userID: number;\n      text: string;\n      time: string;\n      date: string;\n      likes: number[];\n      dislikes: number[];\n    }[];\n  };\n}\n\ninterface LoggedUserID {\n  loggedUser: {\n    id: number;\n  };\n}\n","import {\n  ADD_GLOBAL_MESSAGE,\n  LIKE_MESSAGE,\n  DISLIKE_MESSAGE,\n  LIKE_MESSAGE_DELETE,\n  DISLIKE_MESSAGE_DELETE,\n} from \"./../types\";\n\nexport const addGlobalMessage = (newMessage: NewMessage) => ({\n  type: ADD_GLOBAL_MESSAGE,\n  newMessage,\n});\n\nexport const likeMessage = (messageID: number, loggedUserID: number) => ({\n  type: LIKE_MESSAGE,\n  messageID,\n  loggedUserID,\n});\n\nexport const dislikeMessage = (messageID: number, loggedUserID: number) => ({\n  type: DISLIKE_MESSAGE,\n  messageID,\n  loggedUserID,\n});\n\nexport const likeMessageDelete = (messageID: number, loggedUserID: number) => ({\n  type: LIKE_MESSAGE_DELETE,\n  messageID,\n  loggedUserID,\n});\n\nexport const dislikeMessageDelete = (\n  messageID: number,\n  loggedUserID: number\n) => ({\n  type: DISLIKE_MESSAGE_DELETE,\n  messageID,\n  loggedUserID,\n});\n\ninterface NewMessage {\n  messageID: number;\n  userID: number;\n  text: string;\n  time: string;\n  date: string;\n  likes: number[];\n  dislikes: number[];\n}\n","import React from \"react\";\nimport \"./NoLogged.scss\";\nimport { NavLink } from \"react-router-dom\";\n\nexport const NoLogged: React.FC = () => (\n  <div className=\"no-logged\">\n    <h1 className=\"no-logged__title\">Tylko dla zalogowanych użytkowników</h1>\n    <NavLink className=\"no-logged__btn\" to=\"/login\">\n      Zaloguj się\n    </NavLink>\n  </div>\n);\n","import React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport \"./AddNewMessage.scss\";\nimport { addGlobalMessage } from \"./../../../store/actions/messagesAction\";\nimport { setNotificationBar } from \"../../../store/actions/notificationBarAction\";\nimport { NotificationColors } from \"./../../Notifications/NotificationBar/NotificationBar\";\n\nexport const AddNewMessage: React.FC<AddNewMessageProps> = ({ loggedUser }) => {\n  const dispatch = useDispatch();\n  const [messageValue, setMessageValue] = useState(\"\");\n  const lastMessageID = useSelector(\n    (state: MessageID) => state.messages.lastMessageID\n  );\n\n  const handleSubmitMessage = (e: React.FormEvent<HTMLFormElement>) => {\n    const messageTime = new Date().toLocaleTimeString();\n    let messageDate = new Date().toLocaleDateString();\n    const dayDotIndex = messageDate.indexOf(\".\");\n\n    e.preventDefault();\n\n    if (dayDotIndex === 1) messageDate = `0${messageDate}`;\n\n    if (messageValue) {\n      const newMessage: newMessage = {\n        messageID: lastMessageID + 1,\n        userID: loggedUser.id,\n        text: messageValue,\n        time: messageTime,\n        date: messageDate,\n        likes: [],\n        dislikes: [],\n      };\n      dispatch(addGlobalMessage(newMessage));\n      setMessageValue(\"\");\n    } else {\n      dispatch(setNotificationBar(\"Wpisz wiadomość.\", NotificationColors.red));\n    }\n  };\n\n  return (\n    <div className=\"add-new-message\">\n      <div\n        className=\"add-new-message__logged-user-img\"\n        style={{ backgroundImage: `url(${loggedUser.img})` }}\n      ></div>\n      <form\n        className=\"add-new-message__form\"\n        onSubmit={(e) => handleSubmitMessage(e)}\n      >\n        <input\n          className=\"add-new-message__input\"\n          placeholder=\"Wiadomość...\"\n          type=\"text\"\n          value={messageValue}\n          onChange={(e) => setMessageValue(e.target.value)}\n        />\n        <button className=\"add-new-message__send-btn\">\n          <i className=\"fas fa-space-shuttle add-new-message__send-icon\"></i>\n        </button>\n      </form>\n    </div>\n  );\n};\n\ninterface AddNewMessageProps {\n  loggedUser: {\n    id: number;\n    img: string;\n  };\n}\n\ninterface MessageID {\n  messages: {\n    lastMessageID: number;\n  };\n}\n\ninterface newMessage {\n  messageID: number;\n  userID: number;\n  text: string;\n  time: string;\n  date: string;\n  likes: number[];\n  dislikes: number[];\n}\n","import React from \"react\";\nimport \"./Board.scss\";\nimport { Messages } from \"./Messages/Messages\";\nimport { NoLogged } from \"./NoLogged/NoLogged\";\nimport { AddNewMessage } from \"./AddNewMessage/AddNewMessage\";\n\nexport const Board: React.FC<BoardProps> = ({ loggedUser, allUsersList }) => (\n  <section className=\"board\">\n    {loggedUser.isLogged ? (\n      <>\n        <Messages allUsersList={allUsersList} />\n        <AddNewMessage loggedUser={loggedUser} />\n      </>\n    ) : (\n      <NoLogged />\n    )}\n  </section>\n);\n\nexport interface BoardProps {\n  loggedUser: {\n    id: number;\n    isLogged: boolean;\n    img: string;\n  };\n  allUsersList: {\n    id: number;\n    isLogged: boolean;\n    name: string;\n    img: string;\n    friends: number[];\n  }[];\n}\n","import React from \"react\";\nimport \"./LoggedUserFriends.scss\";\nimport { useHistory } from \"react-router-dom\";\n\nexport const LoggedUserFriends: React.FC<LoggedUserFriendsProps> = ({\n  loggedUser,\n  allUsersList,\n}) => {\n  const history = useHistory();\n  const getLoggedUserFriends = loggedUser.friends.map((friendID) =>\n    allUsersList.find((user) => user.id === friendID)\n  );\n\n  const renderFriends = getLoggedUserFriends.map((friend) => (\n    <div\n      key={friend?.id}\n      className=\"logged-user-friends__friend-img\"\n      style={{ backgroundImage: `url(${friend?.img})` }}\n      onClick={() => history.push(`/users/${friend?.id}/info`)}\n    >\n      <span className=\"logged-user-friends__friend-name\">{friend?.name}</span>\n    </div>\n  ));\n\n  return (\n    <div className=\"logged-user-friends\">\n      <div className=\"logged-user-friends__friend-wrapper\">\n        {renderFriends.length ? (\n          renderFriends\n        ) : (\n          <span className=\"logged-user-friends__friend-name logged-user-friends__friend-name--no-friend\">\n            Brak znajomych\n          </span>\n        )}\n      </div>\n    </div>\n  );\n};\n\ninterface LoggedUserFriendsProps {\n  loggedUser: {\n    friends: number[];\n  };\n  allUsersList: {\n    id: number;\n    name: string;\n    img: string;\n  }[];\n}\n","import React from \"react\";\nimport \"./LoggedUserProfile.scss\";\nimport { LoggedUserFriends } from \"./LoggedUserFriends/LoggedUserFriends\";\nimport { NavLink, Switch, Route, Redirect } from \"react-router-dom\";\n\nexport const LoggedUserProfile: React.FC<LoggedUserProfileProps> = ({\n  loggedUser,\n  allUsersList,\n}) => {\n  const { birthYear, homeTown, sex } = loggedUser.details;\n  const currentYear = new Date().getFullYear();\n  const userAge = currentYear - Number(birthYear);\n  return (\n    <section className=\"logged-user-profile\">\n      <div className=\"logged-user-profile__wrapper-name-img\">\n        <div\n          className=\"logged-user-profile__img\"\n          style={{\n            backgroundImage: `url(${loggedUser.img})`,\n          }}\n        ></div>\n        <h1 className=\"logged-user-profile__name\">{loggedUser.name}</h1>\n      </div>\n\n      <nav className=\"logged-user-profile__local-nav\">\n        <NavLink\n          className=\"logged-user-profile__local-nav-link\"\n          to={`/profile/info`}\n        >\n          Informacje\n        </NavLink>\n        <NavLink\n          className=\"logged-user-profile__local-nav-link\"\n          to={`/profile/friends`}\n        >\n          {`Znajomi(${loggedUser.friends.length})`}\n        </NavLink>\n      </nav>\n      <Switch>\n        <Route\n          path={`/profile/info`}\n          render={() => (\n            <div className=\"logged-user-profile__details-wrapper\">\n              <p className=\"logged-user-profile__details\">{`Nazwa: ${loggedUser?.name}`}</p>\n              <p className=\"logged-user-profile__details\">{`Wiek: ${userAge}`}</p>\n              <p className=\"logged-user-profile__details\">{`Rok urodzenia: ${birthYear}r.`}</p>\n              <p className=\"logged-user-profile__details\">{`Miasto: ${homeTown}`}</p>\n              <p className=\"logged-user-profile__details\">{`Płeć: ${sex}`}</p>\n            </div>\n          )}\n        />\n        <Route\n          path={`/profile/friends`}\n          render={() => (\n            <LoggedUserFriends\n              loggedUser={loggedUser}\n              allUsersList={allUsersList}\n            />\n          )}\n        />\n        <Route render={() => <Redirect to={`/profile/info`} />} />\n      </Switch>\n    </section>\n  );\n};\n\ninterface LoggedUserProfileProps {\n  loggedUser: {\n    name: string;\n    img: string;\n    friends: number[];\n    details: {\n      birthYear: number;\n      homeTown: string;\n      sex: string;\n    };\n  };\n  allUsersList: {\n    id: number;\n    isLogged: boolean;\n    name: string;\n    img: string;\n    friends: number[];\n  }[];\n}\n","import React from \"react\";\nimport \"./UserToAdd.scss\";\nimport {\n  addUserToFriends,\n  deleteUserFromFriends,\n} from \"./../../../store/actions/userAction\";\nimport { setNotificationBar } from \"../../../store/actions/notificationBarAction\";\nimport { NotificationColors } from \"./../../../components/Notifications/NotificationBar/NotificationBar\";\nimport { useHistory } from \"react-router-dom\";\n\nexport const UserToAdd: React.FC<UserToAddProps> = ({\n  globalUser,\n  isInLoggedUserList,\n  dispatch,\n}) => {\n  const history = useHistory();\n  return (\n    <div className=\"user-to-add__wrapper\">\n      <div\n        className=\"user-to-add__image\"\n        style={{ backgroundImage: `url(${globalUser.img})` }}\n        onClick={() => history.push(`users/${globalUser.id}/info`)}\n      ></div>\n      <p className=\"user-to-add__name\">{globalUser.name}</p>\n      {isInLoggedUserList ? (\n        <i\n          onClick={() => {\n            dispatch(deleteUserFromFriends(globalUser?.id));\n            dispatch(\n              setNotificationBar(\n                `Usunięto ${globalUser?.name} ze znajomych.`,\n                NotificationColors.red\n              )\n            );\n          }}\n          className=\"fas fa-user-minus user-to-add__icon user-to-add__icon--delete\"\n        ></i>\n      ) : (\n        <i\n          onClick={() => {\n            dispatch(\n              setNotificationBar(\n                `Dodano ${globalUser.name} do znajomych.`,\n                NotificationColors.green\n              )\n            );\n            dispatch(addUserToFriends(globalUser.id));\n          }}\n          className=\"fas fa-user-plus user-to-add__icon user-to-add__icon--add\"\n        ></i>\n      )}\n    </div>\n  );\n};\n\ninterface UserToAddProps {\n  globalUser: {\n    id: number;\n    isLogged: boolean;\n    name: string;\n    img: string;\n  };\n  isInLoggedUserList: boolean;\n  dispatch: Function;\n}\n","import React, { useState } from \"react\";\nimport \"./AllUsersList.scss\";\nimport { useDispatch } from \"react-redux\";\nimport { UserToAdd } from \"./UserToAdd/UserToAdd\";\n\nexport const AllUsersList: React.FC<UsersProps> = ({\n  loggedUser,\n  allUsersList,\n}) => {\n  const [searchValue, setSearchValue] = useState(\"\");\n  const dispatch = useDispatch();\n\n  const getListWithoutLoggedUser = allUsersList.filter(\n    (user) => user.id !== loggedUser.id\n  );\n\n  const filterUsersList = getListWithoutLoggedUser.filter((globalUser) =>\n    globalUser.name.toUpperCase().includes(searchValue.toUpperCase())\n  );\n\n  const renderUsersList = filterUsersList.map((globalUser) => {\n    const isInLoggedUserList = loggedUser.friends.includes(globalUser.id);\n    return (\n      <UserToAdd\n        key={globalUser.id}\n        globalUser={globalUser}\n        isInLoggedUserList={isInLoggedUserList}\n        dispatch={dispatch}\n      />\n    );\n  });\n\n  return (\n    <section className=\"all-users-list\">\n      <input\n        className=\"all-users-list__search\"\n        type=\"text\"\n        placeholder=\"Wyszukaj...\"\n        value={searchValue}\n        onChange={(e) => setSearchValue(e.target.value)}\n      />\n      {renderUsersList.length ? (\n        renderUsersList\n      ) : (\n        <p className=\"all-users-list__no-result\">Brak wyników</p>\n      )}\n    </section>\n  );\n};\n\ninterface UsersProps {\n  loggedUser: {\n    id: number;\n    friends: number[];\n  };\n  allUsersList: {\n    id: number;\n    isLogged: boolean;\n    name: string;\n    img: string;\n  }[];\n}\n","import React from \"react\";\nimport \"./RegistrationInputs.scss\";\n\nexport const RegistrationInputs: React.FC<RegistrationInputsProps> = ({\n  labelName,\n  inputValue,\n  setInputValue,\n  security = false,\n  registrationError = false,\n  setLoginError,\n}) => (\n  <>\n    <label className=\"registration__label\">{labelName}</label>\n    <input\n      className={`registration__input       \n      ${security && \"registration__input--security\"}`}\n      type=\"text\"\n      value={inputValue}\n      onChange={(e) => {\n        if (registrationError) setLoginError(false);\n        setInputValue(e.target.value);\n      }}\n    />\n  </>\n);\n\ninterface RegistrationInputsProps {\n  labelName: string;\n  inputValue: string;\n  setInputValue: Function;\n  classModifier?: string;\n  security?: boolean;\n  registrationError?: boolean;\n  setLoginError: Function;\n}\n","import Astronaut from \"./../../images/profile_default_sketchs_png/astronaut.png\";\nimport Astronaut2 from \"./../../images/profile_default_sketchs_png/astronaut2.png\";\nimport Meteor from \"./../../images/profile_default_sketchs_png/meteor.png\";\nimport Moon from \"./../../images/profile_default_sketchs_png/moon.png\";\nimport Planet from \"./../../images/profile_default_sketchs_png/planet.png\";\nimport Rocket from \"./../../images/profile_default_sketchs_png/rocket.png\";\nimport SmallRocket from \"./../../images/profile_default_sketchs_png/small-rocket.png\";\nimport Sonda from \"./../../images/profile_default_sketchs_png/sonda.png\";\nimport Star from \"./../../images/profile_default_sketchs_png/star.png\";\n\nexport const profileSketchs = [\n  Astronaut,\n  Astronaut2,\n  Meteor,\n  Moon,\n  Planet,\n  Rocket,\n  SmallRocket,\n  Sonda,\n  Star,\n];\n\nexport const validation = (\n  login: string,\n  name: string,\n  password: string,\n  homeTown: string\n): boolean | string => {\n  const isNumberRegExp = new RegExp(\"[0-9]\", \"g\");\n  const isSpaceRegExp = new RegExp(\" \", \"g\");\n  const spaceInLogin = isSpaceRegExp.test(login);\n  const passwordWithNumbers = isNumberRegExp.test(password);\n  const spaceInPassword = isSpaceRegExp.test(password);\n  const minLoginAndNameLength = 3;\n  const maxLoginAndNameLength = 20;\n  const minPasswordLength = 5;\n\n  if (login === \"\" || name === \"\" || password === \"\" || homeTown === \"\") {\n    return \"Uzupełnij wszystkie pola!\";\n  } else if (login.length < minLoginAndNameLength) {\n    return `Login musi mieć co najmniej ${minLoginAndNameLength} znaki.`;\n  } else if (login.length > maxLoginAndNameLength) {\n    return `Login jest za długi (max ${maxLoginAndNameLength} znaków).`;\n  } else if (spaceInLogin) {\n    return `Login nie może posiadać spacji.`;\n  } else if (name.length < minLoginAndNameLength) {\n    return `Nazwa musi mieć co najmniej ${minLoginAndNameLength} znaki.`;\n  } else if (name.length > maxLoginAndNameLength) {\n    return `Nazwa jest za długa (max ${maxLoginAndNameLength} znaków).`;\n  } else if (password.length < minPasswordLength) {\n    return `Hasło musi mieć co najmniej ${minPasswordLength} znaków.`;\n  } else if (!passwordWithNumbers) {\n    return \"Hasło musi zawierać jedną lub więcej cyfr.\";\n  } else if (spaceInPassword) {\n    return \"Hasło nie może posiadać spacji.\";\n  } else return true;\n};\n","import React from \"react\";\nimport \"./YearSelect.scss\";\n\nexport const YearSelect: React.FC<YearSelectProps> = ({\n  yearValue,\n  setYearValue,\n}) => {\n  let getYears: number[] = [];\n  let renderOptions: JSX.Element[] = [];\n  const currentYear = new Date().getFullYear();\n\n  for (let index = currentYear; index >= 1950; index--) {\n    getYears.push(index);\n  }\n\n  renderOptions = getYears.map((year) => (\n    <option key={year} value={year} className=\"year-select__option\">\n      {year}\n    </option>\n  ));\n  return (\n    <>\n      <label className=\"year-select__label\">Rok urodzenia</label>\n      <select\n        value={yearValue}\n        onChange={(e) => setYearValue(e.target.value)}\n        className=\"year-select\"\n      >\n        {renderOptions}\n      </select>\n    </>\n  );\n};\n\ninterface YearSelectProps {\n  yearValue: string;\n  setYearValue: Function;\n}\n","import React from \"react\";\nimport \"./SexCheck.scss\";\n\nexport const SexCheck: React.FC<SexCheckProps> = ({ sex, setSex }) => (\n  <div className=\"sex-check\">\n    <p className=\"sex-check__title\">Płeć</p>\n    <label className=\"sex-check__label\">\n      <input\n        className=\"sex-check__choice\"\n        type=\"radio\"\n        checked={sex === \"female\"}\n        onChange={() => setSex(\"female\")}\n      />\n      Kobieta\n    </label>\n    <label className=\"sex-check__label\">\n      <input\n        className=\"sex-check__choice\"\n        type=\"radio\"\n        checked={sex === \"male\"}\n        onChange={() => setSex(\"male\")}\n      />\n      Mężczyzna\n    </label>\n  </div>\n);\n\ninterface SexCheckProps {\n  sex: string;\n  setSex: Function;\n}\n","import React, { useState } from \"react\";\nimport \"./Registration.scss\";\nimport { RegistrationInputs } from \"./RegistrationInputs/RegistrationInputs\";\nimport { useDispatch } from \"react-redux\";\nimport { addNewRegistredUser } from \"./../../store/actions/usersAction\";\nimport { setLoginUser, setUserDetails } from \"./../../store/actions/userAction\";\nimport { profileSketchs, validation } from \"./RegistrationLogic\";\nimport { setNotificationBar } from \"./../../store/actions/notificationBarAction\";\nimport { NotificationColors } from \"./../Notifications/NotificationBar/NotificationBar\";\nimport { YearSelect } from \"./YearSelect/YearSelect\";\nimport { Prompt } from \"react-router-dom\";\nimport { SexCheck } from \"./SexCheck/SexCheck\";\n\nexport const Registration: React.FC<RegistrationProps> = ({\n  allUsersList,\n  lastUserID,\n}) => {\n  const [loginValue, setLoginValue] = useState(\"\");\n  const [nameValue, setNameValue] = useState(\"\");\n  const [passwordValue, setPasswordValue] = useState(\"\");\n  const [registrationError, setRegistationError] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(\"No error\");\n  const [registrationLoad, setRegistrationLoad] = useState(false);\n  const [yearValue, setYearValue] = useState(\"2000\");\n  const [sex, setSex] = useState(\"female\");\n  const [homeTown, setHomeTown] = useState(\"Warszawa\");\n  const dispatch = useDispatch();\n\n  if (registrationError && !registrationLoad) setRegistrationLoad(true);\n\n  const handleSubmitRegistration = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    const registrationResult = validation(\n      loginValue,\n      nameValue,\n      passwordValue,\n      homeTown\n    );\n    const isLoginUsed = allUsersList.findIndex(\n      (user) => user.login === loginValue\n    );\n    if (isLoginUsed === -1) {\n      if (registrationResult === true) {\n        const sketchIndex = Math.floor(Math.random() * profileSketchs.length);\n        const newID = lastUserID + 1;\n        const userSex = sex === \"female\" ? \"kobieta\" : \"mężczyzna\";\n        const newUser = {\n          id: newID,\n          login: loginValue,\n          password: passwordValue,\n          isLogged: false,\n          name: nameValue,\n          img: profileSketchs[sketchIndex],\n          friends: [],\n          details: {\n            birthYear: Number(yearValue),\n            homeTown: homeTown,\n            sex: userSex,\n          },\n        };\n        dispatch(addNewRegistredUser(newUser));\n        dispatch(\n          setNotificationBar(\n            \"Dziękujemy za rejestrację, miłego explorowania!\",\n            NotificationColors.green\n          )\n        );\n        dispatch(setUserDetails(newUser));\n        dispatch(setLoginUser(true));\n      } else {\n        setRegistationError(true);\n        setErrorMessage(registrationResult as string);\n      }\n    } else {\n      setRegistationError(true);\n      setErrorMessage(\"Login jest już zajęty!\");\n    }\n  };\n\n  return (\n    <>\n      <Prompt\n        when={loginValue || nameValue || passwordValue ? true : false}\n        message={\"Zmiany nie zostaną zapisane, mimo to przejść dalej?\"}\n      />\n      <section className=\"registration\">\n        <form\n          className=\"registration__form-wrapper\"\n          onSubmit={(e) => handleSubmitRegistration(e)}\n        >\n          <RegistrationInputs\n            labelName=\"Login\"\n            inputValue={loginValue}\n            setInputValue={setLoginValue}\n            registrationError={registrationError}\n            setLoginError={setRegistationError}\n          />\n\n          <RegistrationInputs\n            labelName=\"Wyświetlana nazwa\"\n            inputValue={nameValue}\n            setInputValue={setNameValue}\n            registrationError={registrationError}\n            setLoginError={setRegistationError}\n          />\n\n          <RegistrationInputs\n            labelName=\"Hasło*\"\n            inputValue={passwordValue}\n            setInputValue={setPasswordValue}\n            security={true}\n            registrationError={registrationError}\n            setLoginError={setRegistationError}\n          />\n          <p className=\"registration__info-password\">\n            *Hasło: minimum 5 znaków i przynajmniej jedna cyfra.\n          </p>\n\n          <SexCheck sex={sex} setSex={setSex} />\n          <YearSelect yearValue={yearValue} setYearValue={setYearValue} />\n\n          <RegistrationInputs\n            labelName=\"Miasto\"\n            inputValue={homeTown}\n            setInputValue={setHomeTown}\n            registrationError={registrationError}\n            setLoginError={setRegistationError}\n          />\n          <button className=\"registration__btn\">Zarejestruj się</button>\n        </form>\n        <p\n          className={`registration__error-message ${\n            registrationError\n              ? \"registration__error-message--show\"\n              : registrationLoad\n              ? \"registration__error-message--hide\"\n              : \"\"\n          }`}\n        >\n          {errorMessage}\n        </p>\n        <p className=\"registration__info registration__info--animation\">\n          Rejestracja działa tylko na daną sesję, po odświeżeniu strony wszelkie\n          zmiany zostaną utracone!\n        </p>\n      </section>\n    </>\n  );\n};\n\nexport interface RegistrationProps {\n  allUsersList: {\n    login: string;\n  }[];\n  lastUserID: number;\n}\n","import { ADD_NEW_REGISTRED_USER, UPDATE_USERS_LIST } from \"./../types\";\n\nexport const addNewRegistredUser = (newUser: NewUser) => ({\n  type: ADD_NEW_REGISTRED_USER,\n  newUser: newUser,\n});\n\nexport const updateUsersList = (list: NewUser[]) => ({\n  type: UPDATE_USERS_LIST,\n  list: list,\n});\n\ninterface NewUser {\n  login: string;\n  password: string;\n  id: number;\n  isLogged: boolean;\n  name: string;\n  img: string;\n  friends: number[];\n}\n","import React from \"react\";\nimport \"./PathError.scss\";\nimport { useHistory } from \"react-router-dom\";\n\nexport const PathError: React.FC = () => {\n  const pathHistory = useHistory();\n  return (\n    <div className=\"path-error\">\n      <p className=\"path-error__desc\">Error</p>\n      <div\n        className=\"path-error__image\"\n        style={{\n          backgroundImage: `url(https://media.giphy.com/media/7lsw8RenVcjCM/source.gif)`,\n        }}\n      ></div>\n      <button className=\"path-error__btn\" onClick={() => pathHistory.push(\"/\")}>\n        Wróć do strony głównej\n      </button>\n    </div>\n  );\n};\n","import React from \"react\";\nimport \"./GlobalUserFriends.scss\";\n\nexport const GlobalUserFriends: React.FC<GlobalUserFriendsProps> = ({\n  history,\n  friendsList,\n  allUsersList,\n}) => {\n  const getFriends = friendsList.map((friendID) =>\n    allUsersList.find((user) => user.id === friendID)\n  );\n\n  const renderFriends = getFriends.map((friend) => (\n    <div\n      key={friend?.id}\n      className=\"global-user-friends__friend-img\"\n      style={{ backgroundImage: `url(${friend?.img})` }}\n      onClick={() => history.push(`/users/${friend?.id}/info`)}\n    >\n      <span className=\"global-user-friends__friend-name\">{friend?.name}</span>\n    </div>\n  ));\n\n  return (\n    <div className=\"global-user-friends\">\n      <div className=\"global-user-friends__friend-wrapper\">\n        {renderFriends.length ? (\n          renderFriends\n        ) : (\n          <span className=\"global-user-friends__friend-name global-user-friends__friend-name--no-friend\">\n            Brak znajomych\n          </span>\n        )}\n      </div>\n    </div>\n  );\n};\n\ninterface GlobalUserFriendsProps {\n  history: {\n    push: Function;\n  };\n  friendsList: number[];\n  allUsersList: {\n    id: number;\n    isLogged: boolean;\n    name: string;\n    img: string;\n    friends: number[];\n  }[];\n}\n","import React from \"react\";\nimport \"./GlobalUserImgName.scss\";\n\nexport const GlobalUserImgName: React.FC<GlobalUserImgNameProps> = ({\n  globalUserDetails,\n}) => (\n  <div className=\"global-user-img-name\">\n    <div\n      className=\"global-user-img-name__img\"\n      style={{\n        backgroundImage: `url(${globalUserDetails?.img})`,\n      }}\n    ></div>\n    <h1 className=\"global-user-img-name__name\">{globalUserDetails?.name}</h1>\n  </div>\n);\n\ninterface GlobalUserImgNameProps {\n  globalUserDetails: {\n    name: string;\n    img: string;\n  };\n}\n","import React from \"react\";\nimport \"./GlobalUserLocalNav.scss\";\nimport { NavLink } from \"react-router-dom\";\nimport {\n  addUserToFriends,\n  deleteUserFromFriends,\n} from \"./../../../store/actions/userAction\";\nimport { setNotificationBar } from \"./../../../store/actions/notificationBarAction\";\nimport { NotificationColors } from \"./../../../components/Notifications/NotificationBar/NotificationBar\";\n\nexport const GlobalUserLocalNav: React.FC<GlobalUserLocalNavProps> = ({\n  dispatch,\n  globalUserDetails,\n  isInFriendLoggedUser,\n}) => (\n  <nav className=\"global-user-local-nav\">\n    <NavLink\n      className=\"global-user-local-nav__link\"\n      to={`/users/${globalUserDetails?.id}/info`}\n    >\n      Informacje\n    </NavLink>\n    <NavLink\n      className=\"global-user-local-nav__link\"\n      to={`/users/${globalUserDetails?.id}/friends`}\n    >\n      {`Znajomi(${globalUserDetails?.friends.length})`}\n    </NavLink>\n    <div className=\"global-user-local-nav__is-friend\">\n      {isInFriendLoggedUser ? (\n        <i\n          onClick={() => {\n            dispatch(deleteUserFromFriends(globalUserDetails?.id));\n            dispatch(\n              setNotificationBar(\n                `Usunięto ${globalUserDetails?.name} ze znajomych.`,\n                NotificationColors.red\n              )\n            );\n          }}\n          className=\"fas fa-user-minus global-user-local-nav__is-friend-icon global-user-local-nav__is-friend--delete\"\n        ></i>\n      ) : (\n        <i\n          onClick={() => {\n            dispatch(\n              setNotificationBar(\n                `Dodano ${globalUserDetails?.name} do znajomych.`,\n                NotificationColors.green\n              )\n            );\n            dispatch(addUserToFriends(globalUserDetails?.id));\n          }}\n          className=\"fas fa-user-plus global-user-local-nav__is-friend-icon global-user-local-nav__is-friend--add\"\n        ></i>\n      )}\n    </div>\n  </nav>\n);\n\ninterface GlobalUserLocalNavProps {\n  dispatch: Function;\n  globalUserDetails: {\n    id: number;\n    name: string;\n    friends: number[];\n  };\n  isInFriendLoggedUser: boolean;\n}\n","import React, { useEffect, useState } from \"react\";\nimport \"./GlobalUserProfile.scss\";\nimport { useHistory, Switch, Route, Redirect } from \"react-router-dom\";\nimport { GlobalUserFriends } from \"./GlobalUserFriends/GlobalUserFriends\";\nimport { GlobalUserImgName } from \"./GlobalUserImgName/GlobalUserImgName\";\nimport { GlobalUserLocalNav } from \"./GlobalUserLocalNav/GlobalUserLocalNav\";\nimport { useDispatch } from \"react-redux\";\n\nexport const GlobalUserProfile: React.FC<GlobalUserProfileProps> = ({\n  params,\n  allUsersList,\n  loggedUser,\n}) => {\n  const [animation, setAnimation] = useState(false);\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const globalUserDetails = allUsersList.find(\n    (user) => user.id === Number(params.id)\n  );\n  const isUserIdGlobal = allUsersList.findIndex(\n    (user) => user.id === Number(params.id)\n  );\n  const { birthYear, homeTown, sex } = globalUserDetails?.details || {};\n  const currentYear = new Date().getFullYear();\n  const userAge = currentYear - Number(birthYear);\n  const isInFriendLoggedUser =\n    loggedUser.friends.findIndex(\n      (friend) => friend === globalUserDetails?.id\n    ) === -1\n      ? false\n      : true;\n\n  useEffect(() => {\n    if (Number(params.id) === loggedUser.id) history.push(\"/profile\");\n    if (isUserIdGlobal === -1) history.push(\"/users\");\n    if (!animation) setAnimation(true);\n    const timerIndex = setTimeout(() => setAnimation(false), 700);\n    return () => clearTimeout(timerIndex);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [params.id, loggedUser.id]);\n\n  return (\n    <section\n      className={`global-user-profile ${\n        animation ? \"global-user-profile--animation\" : \"\"\n      }`}\n    >\n      <GlobalUserImgName\n        globalUserDetails={globalUserDetails || { name: \"\", img: \"\" }}\n      />\n      <GlobalUserLocalNav\n        dispatch={dispatch}\n        globalUserDetails={\n          globalUserDetails || { id: -1, name: \"\", friends: [] }\n        }\n        isInFriendLoggedUser={isInFriendLoggedUser}\n      />\n\n      <Switch>\n        <Route\n          path={`/users/${globalUserDetails?.id}/info`}\n          render={() => {\n            return isInFriendLoggedUser ? (\n              <div className=\"global-user-profile__details-wrapper\">\n                <p className=\"global-user-profile__details\">{`Nazwa: ${globalUserDetails?.name}`}</p>\n                <p className=\"global-user-profile__details\">{`Wiek: ${userAge}`}</p>\n                <p className=\"global-user-profile__details\">{`Rok urodzenia: ${birthYear}r.`}</p>\n                <p className=\"global-user-profile__details\">{`Miasto: ${homeTown}`}</p>\n                <p className=\"global-user-profile__details\">{`Płeć: ${sex}`}</p>\n              </div>\n            ) : (\n              <span className=\"global-user-profile__details-no-friend\">\n                {`Ta sekcja nie jest dostępna, ponieważ Ty i ${globalUserDetails?.name} nie jesteście znajomymi.`}\n              </span>\n            );\n          }}\n        />\n        <Route\n          path={`/users/${globalUserDetails?.id}/friends`}\n          render={() => (\n            <GlobalUserFriends\n              history={history}\n              friendsList={globalUserDetails?.friends || []}\n              allUsersList={allUsersList}\n            />\n          )}\n        />\n        <Route\n          render={() => (\n            <Redirect to={`/users/${globalUserDetails?.id}/info`} />\n          )}\n        />\n      </Switch>\n    </section>\n  );\n};\n\ninterface GlobalUserProfileProps {\n  params: {\n    id: string;\n  };\n  allUsersList: {\n    id: number;\n    isLogged: boolean;\n    name: string;\n    img: string;\n    friends: number[];\n    details: {\n      birthYear: number;\n      homeTown: string;\n      sex: string;\n    };\n  }[];\n  loggedUser: {\n    id: number;\n    isLogged: boolean;\n    name: string;\n    img: string;\n    friends: number[];\n  };\n}\n","import React, { useEffect } from \"react\";\nimport \"./SubpagesContent.scss\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { Route, Switch, Redirect } from \"react-router-dom\";\nimport { AboutApp } from \"../AboutApp/AboutApp\";\nimport { LoginDesk } from \"../LoginDesk/LoginDesk\";\nimport { Board } from \"../Board/Board\";\nimport { LoggedUserProfile } from \"../LoggedUserProfile/LoggedUserProfile\";\nimport { AllUsersList } from \"../AllUsersList/AllUsersList\";\nimport { Registration } from \"../Registration/Registration\";\nimport { updateUsersList } from \"./../../store/actions/usersAction\";\nimport { PathError } from \"./../PathError/PathError\";\nimport { GlobalUserProfile } from \"../GlobalUserProfile/GlobalUserProfile\";\n\nexport const SubpagesContent: React.FC = () => {\n  const loggedUser = useSelector((state: User) => state.loggedUser);\n  const allUsers = useSelector((state: Users) => state.allUsers);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (loggedUser.id !== -1) {\n      let updatedUsersList = allUsers.list.map((user) => {\n        if (user.id === loggedUser.id) {\n          user.friends = loggedUser.friends;\n        }\n        return user;\n      });\n\n      updatedUsersList = updatedUsersList.map((user) => {\n        if (\n          user.id === loggedUser.friends[loggedUser.friends.length - 1] &&\n          !user.friends.includes(loggedUser.id)\n        ) {\n          user.friends.push(loggedUser.id);\n        } else if (\n          user.friends.includes(loggedUser.id) &&\n          !loggedUser.friends.includes(user.id)\n        ) {\n          user.friends = user.friends.filter(\n            (friend) => friend !== loggedUser.id\n          );\n        }\n\n        return user;\n      });\n\n      dispatch(updateUsersList(updatedUsersList));\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [loggedUser.friends]);\n\n  return (\n    <main className=\"desk\">\n      <Switch>\n        <Route\n          path=\"/\"\n          exact\n          render={() => <AboutApp loggedUser={loggedUser} />}\n        />\n\n        <Route\n          path=\"/profile\"\n          render={() =>\n            loggedUser.isLogged ? (\n              <LoggedUserProfile\n                loggedUser={loggedUser}\n                allUsersList={allUsers.list}\n              />\n            ) : (\n              <Redirect to=\"/login\" />\n            )\n          }\n        />\n\n        <Route\n          path=\"/board\"\n          render={() => (\n            <Board loggedUser={loggedUser} allUsersList={allUsers.list} />\n          )}\n        />\n\n        <Route\n          exact\n          path=\"/users\"\n          render={() =>\n            loggedUser.isLogged ? (\n              <AllUsersList\n                loggedUser={loggedUser}\n                allUsersList={allUsers.list}\n              />\n            ) : (\n              <Redirect to=\"/login\" />\n            )\n          }\n        />\n\n        <Route\n          path=\"/users/:id\"\n          render={(props) =>\n            loggedUser.isLogged ? (\n              <GlobalUserProfile\n                params={props.match.params}\n                allUsersList={allUsers.list}\n                loggedUser={loggedUser}\n              />\n            ) : (\n              <Redirect to=\"/login\" />\n            )\n          }\n        />\n\n        <Route\n          path=\"/login\"\n          render={() =>\n            loggedUser.isLogged ? (\n              <Redirect to=\"/\" />\n            ) : (\n              <LoginDesk allUsersList={allUsers.list} />\n            )\n          }\n        />\n\n        <Route\n          path=\"/registration\"\n          render={() =>\n            loggedUser.isLogged ? (\n              <Redirect to=\"/\" />\n            ) : (\n              <Registration\n                allUsersList={allUsers.list}\n                lastUserID={allUsers.lastUserID}\n              />\n            )\n          }\n        />\n\n        <Route component={PathError} />\n      </Switch>\n    </main>\n  );\n};\n\ninterface User {\n  loggedUser: {\n    id: number;\n    isLogged: boolean;\n    name: string;\n    img: string;\n    friends: number[];\n    details: {\n      birthYear: number;\n      homeTown: string;\n      sex: string;\n    };\n  };\n}\n\ninterface Users {\n  allUsers: {\n    list: {\n      login: string;\n      password: string;\n      id: number;\n      isLogged: boolean;\n      name: string;\n      img: string;\n      friends: number[];\n      details: {\n        birthYear: number;\n        homeTown: string;\n        sex: string;\n      };\n    }[];\n    lastUserID: number;\n  };\n}\n","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { hideMenu, showMenu } from \"./../../store/actions/menuAction\";\nimport \"./MenuIcon.scss\";\n\nexport const MenuIcon: React.FC = () => {\n  const menuVisibility = useSelector((state: Menu) => state.menu.visibility);\n  const dispatch = useDispatch();\n\n  const topAnimation = menuVisibility\n    ? \"menu-icon__bar--top-animation\"\n    : \"menu-icon__bar--top-animationBack\";\n  const centerAnimation = menuVisibility\n    ? \"menu-icon__bar--center-animation\"\n    : \"\";\n  const bottomAnimation = menuVisibility\n    ? \"menu-icon__bar--bottom-animation\"\n    : \"menu-icon__bar--bottom-animationBack\";\n\n  return (\n    <div\n      className=\"menu-icon\"\n      onClick={() => {\n        if (menuVisibility) dispatch(hideMenu());\n        else dispatch(showMenu());\n      }}\n    >\n      <span\n        className={`menu-icon__bar menu-icon__bar--top ${topAnimation}`}\n      ></span>\n      <span\n        className={`menu-icon__bar menu-icon__bar--center ${centerAnimation}`}\n      ></span>\n      <span\n        className={`menu-icon__bar menu-icon__bar--bottom ${bottomAnimation}`}\n      ></span>\n    </div>\n  );\n};\n\ninterface Menu {\n  menu: {\n    visibility: boolean;\n  };\n}\n","import { HIDE_MENU, SHOW_MENU } from \"./../types\";\n\nexport const showMenu = () => {\n  return {\n    type: SHOW_MENU,\n    visibility: true,\n  };\n};\n\nexport const hideMenu = () => {\n  return {\n    type: HIDE_MENU,\n    visibility: false,\n  };\n};\n","import React, { useState } from \"react\";\nimport \"./Menu.scss\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport SpaceBG from \"./../../images/space-bg.jpg\";\nimport { NavLink } from \"react-router-dom\";\nimport { hideMenu } from \"./../../store/actions/menuAction\";\nimport {\n  setLoginUser,\n  resetUserDetails,\n} from \"./../../store/actions/userAction\";\nimport { deleteNotifications } from \"./../../store/actions/notificationBarAction\";\n\nconst spaceBgImage = { backgroundImage: `url(${SpaceBG})` };\n\nexport const Menu: React.FC = () => {\n  const dispatch = useDispatch();\n  const menuVisibility = useSelector((state: Menu) => state.menu.visibility);\n  const userIsLogged = useSelector((state: User) => state.loggedUser.isLogged);\n  const [menuLoad, setMenuLoad] = useState(false);\n  const animation = menuVisibility ? \"menu--show\" : \"menu--hide\";\n\n  if (menuVisibility && !menuLoad) setMenuLoad(true);\n\n  return (\n    <nav className={`menu ${menuLoad ? animation : \"\"}`} style={spaceBgImage}>\n      <ul className=\"menu__container\">\n        <NavLink\n          className=\"menu__link\"\n          to=\"/\"\n          exact\n          onClick={() => dispatch(hideMenu())}\n        >\n          O aplikacji\n        </NavLink>\n\n        {userIsLogged ? (\n          <NavLink\n            className=\"menu__link\"\n            to=\"/profile\"\n            onClick={() => dispatch(hideMenu())}\n          >\n            Profil\n          </NavLink>\n        ) : null}\n\n        <NavLink\n          className=\"menu__link\"\n          to=\"/board\"\n          onClick={() => dispatch(hideMenu())}\n        >\n          Tablica\n        </NavLink>\n\n        {userIsLogged ? (\n          <NavLink\n            className=\"menu__link\"\n            to=\"/users\"\n            onClick={() => dispatch(hideMenu())}\n          >\n            Użytkownicy\n          </NavLink>\n        ) : null}\n\n        {userIsLogged ? (\n          <NavLink\n            className=\"menu__link\"\n            to=\"/login\"\n            onClick={() => {\n              dispatch(hideMenu());\n              dispatch(setLoginUser(false));\n              dispatch(resetUserDetails());\n              dispatch(deleteNotifications());\n            }}\n          >\n            Wyloguj\n          </NavLink>\n        ) : (\n          <NavLink\n            className=\"menu__link\"\n            to=\"/login\"\n            onClick={() => dispatch(hideMenu())}\n          >\n            Logowanie\n          </NavLink>\n        )}\n\n        {userIsLogged ? null : (\n          <NavLink\n            className=\"menu__link\"\n            to=\"/registration\"\n            onClick={() => dispatch(hideMenu())}\n          >\n            Rejestracja\n          </NavLink>\n        )}\n\n        <p className=\"menu__author\">\n          Projekt i realizacja{\" \"}\n          <a\n            className=\"menu__author--link\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            href=\"https://mkphercog.github.io/mywebsite/\"\n          >\n            Marcin Hercog\n          </a>\n        </p>\n      </ul>\n    </nav>\n  );\n};\n\ninterface Menu {\n  menu: {\n    visibility: boolean;\n  };\n}\n\ninterface User {\n  loggedUser: {\n    isLogged: boolean;\n  };\n}\n","import React, { useEffect } from \"react\";\nimport \"./Notifications.scss\";\nimport {\n  NotificationBar,\n  NotificationColors,\n} from \"./NotificationBar/NotificationBar\";\nimport { useDispatch } from \"react-redux\";\nimport { deleteNotifications } from \"./../../store/actions/notificationBarAction\";\n\nexport const Notifications: React.FC<NotificationsProps> = ({\n  notificationList,\n}) => {\n  const dispatch = useDispatch();\n  useEffect(() => {\n    if (notificationList.length > 0) {\n      const timeIndex = setTimeout(() => {\n        dispatch(deleteNotifications());\n      }, 2500);\n      return () => clearTimeout(timeIndex);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [notificationList.length]);\n\n  const renderNotifications = notificationList.map(\n    ({ messageText, colorBar }, index) => (\n      <NotificationBar\n        key={index}\n        messageText={messageText}\n        colorBar={colorBar}\n      />\n    )\n  );\n\n  return <div className=\"notifications\">{renderNotifications}</div>;\n};\n\ninterface NotificationsProps {\n  notificationList: {\n    messageText: string;\n    colorBar: NotificationColors;\n    animation: boolean;\n  }[];\n}\n","import React from \"react\";\nimport \"./ProfileShortcut.scss\";\nimport { useHistory } from \"react-router-dom\";\n\nexport const ProfileShortcut: React.FC<ProfileShortcutProps> = ({\n  loggedUser,\n}) => {\n  const history = useHistory();\n  return (\n    <div\n      className=\"profile-shortcut\"\n      style={{ backgroundImage: `url(${loggedUser.img})` }}\n      onClick={() => history.push(\"/profile/info\")}\n    >\n      <p className=\"profile-shortcut__name\">{loggedUser.name}</p>\n    </div>\n  );\n};\n\nexport interface ProfileShortcutProps {\n  loggedUser: {\n    img: string;\n    name: string;\n  };\n}\n","import React from \"react\";\nimport SpaceBG from \"./images/space-bg2.jpg\";\nimport \"./App.scss\";\nimport { Header } from \"./components/Header/Header\";\nimport { SubpagesContent } from \"./components/SubpagesContent/SubpagesContent\";\nimport { MenuIcon } from \"./components/MenuIcon/MenuIcon\";\nimport { Menu } from \"./components/Menu/Menu\";\nimport { useSelector } from \"react-redux\";\nimport { Notifications } from \"./components/Notifications/Notifications\";\nimport { NotificationColors } from \"./components/Notifications/NotificationBar/NotificationBar\";\nimport { ProfileShortcut } from \"./components/ProfileShortcut/ProfileShortcut\";\n\nconst spaceBgImage = { backgroundImage: `url(${SpaceBG})` };\n\nexport const App = () => {\n  const notificationList = useSelector(\n    (state: Notification) => state.notificationBar.notificationList\n  );\n  const loggedUser = useSelector((state: LoggedUser) => state.loggedUser);\n\n  return (\n    <div className=\"app\" style={spaceBgImage}>\n      <MenuIcon />\n      <Header />\n      <SubpagesContent />\n      <Menu />\n      {loggedUser.isLogged ? (\n        <>\n          <Notifications notificationList={notificationList} />\n          <ProfileShortcut loggedUser={loggedUser} />\n        </>\n      ) : null}\n    </div>\n  );\n};\n\ninterface Notification {\n  notificationBar: {\n    notificationList: {\n      messageText: string;\n      colorBar: NotificationColors;\n      animation: boolean;\n    }[];\n  };\n}\n\ninterface LoggedUser {\n  loggedUser: {\n    isLogged: boolean;\n    img: string;\n    name: string;\n  };\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { HIDE_MENU, SHOW_MENU } from \"./../types\";\n\nconst INITIAL_STATE = {\n  visibility: false,\n};\n\nexport const menuReducer = (state = INITIAL_STATE, action: Action) => {\n  switch (action.type) {\n    case SHOW_MENU:\n      return { ...state, visibility: action.visibility };\n    case HIDE_MENU:\n      return { ...state, visibility: action.visibility };\n    default:\n      return state;\n  }\n};\n\ninterface Action {\n  type: string;\n  visibility: boolean;\n}\n","import {\n  SET_LOGIN_USER,\n  SET_USER_DETAILS,\n  RESET_USER_DETAILS,\n  ADD_USER_TO_FRIENDS,\n  DELETE_USER_FROM_FRIENDS,\n} from \"./../types\";\n\nconst INITIAL_STATE = {\n  id: -1,\n  isLogged: false,\n  name: \"Nieznajomy\",\n  img: \"\",\n  friends: [],\n  details: {\n    birthYear: 2000,\n    homeTown: \"Warszawa\",\n    sex: \"mężczyzna\",\n  },\n};\n\nexport const userReducer = (state = INITIAL_STATE, action: Action) => {\n  switch (action.type) {\n    case SET_LOGIN_USER:\n      return {\n        ...state,\n        isLogged: action.isLogged,\n      };\n    case SET_USER_DETAILS:\n      return {\n        ...state,\n        id: action.id,\n        name: action.name,\n        img: action.img,\n        friends: action.friends,\n        details: {\n          birthYear: action.birthYear,\n          homeTown: action.homeTown,\n          sex: action.sex,\n        },\n      };\n    case RESET_USER_DETAILS:\n      return {\n        ...state,\n        ...INITIAL_STATE,\n      };\n    case ADD_USER_TO_FRIENDS:\n      return {\n        ...state,\n        friends: [...state.friends, action.newFriendID],\n      };\n    case DELETE_USER_FROM_FRIENDS:\n      const listWithoutDeletedFriend = state.friends.filter(\n        (friend) => friend !== action.friendToDeleteID\n      );\n      return {\n        ...state,\n        friends: listWithoutDeletedFriend,\n      };\n    default:\n      return state;\n  }\n};\n\ninterface Action {\n  type: string;\n  id: number;\n  isLogged: boolean;\n  name: string;\n  img: string;\n  friends: number[];\n  newFriendID: number;\n  friendToDeleteID: number;\n  birthYear: number;\n  homeTown: string;\n  sex: string;\n}\n","import { ADD_NEW_REGISTRED_USER, UPDATE_USERS_LIST } from \"./../types\";\nimport TEMP_ACC from \"./../../accounts.json\";\n\nconst INITAL_STATE = {\n  list: TEMP_ACC.accounts,\n  lastUserID: TEMP_ACC.accounts.length - 1,\n};\n\nexport const usersReducer = (state = INITAL_STATE, action: Action) => {\n  switch (action.type) {\n    case ADD_NEW_REGISTRED_USER:\n      return {\n        ...state,\n        list: [...state.list, action.newUser],\n        lastUserID: action.newUser.id,\n      };\n    case UPDATE_USERS_LIST:\n      return {\n        ...state,\n        list: action.list,\n      };\n    default:\n      return state;\n  }\n};\n\ninterface Action {\n  type: string;\n  newUser: {\n    id: number;\n    login: string;\n    password: string;\n    name: string;\n    img: string;\n    friends: number[];\n    details: {\n      birthYear: number;\n      homeTown: string;\n      sex: string;\n    };\n  };\n  list: {\n    id: number;\n    login: string;\n    password: string;\n    isLogged: boolean;\n    name: string;\n    img: string;\n    friends: number[];\n    details: {\n      birthYear: number;\n      homeTown: string;\n      sex: string;\n    };\n  }[];\n}\n","import {\n  ADD_GLOBAL_MESSAGE,\n  LIKE_MESSAGE,\n  DISLIKE_MESSAGE,\n  LIKE_MESSAGE_DELETE,\n  DISLIKE_MESSAGE_DELETE,\n} from \"./../types\";\nimport TEMP_MESS from \"./../../messages.json\";\n\nconst INITAL_STATE = {\n  globalMessages: TEMP_MESS.messages,\n  lastMessageID: TEMP_MESS.messages.length,\n};\n\nexport const messageReducer = (state = INITAL_STATE, action: Action) => {\n  switch (action.type) {\n    case ADD_GLOBAL_MESSAGE:\n      return {\n        ...state,\n        globalMessages: [...state.globalMessages, action.newMessage],\n        lastMessageID: action.newMessage.messageID,\n      };\n\n    case LIKE_MESSAGE: {\n      const likedMess = state.globalMessages.map((mess) => {\n        if (mess.messageID === action.messageID)\n          mess.likes.push(action.loggedUserID);\n        return mess;\n      });\n      return {\n        ...state,\n        globalMessages: likedMess,\n      };\n    }\n\n    case LIKE_MESSAGE_DELETE: {\n      const likedMessDelete = state.globalMessages.map((mess) => {\n        if (mess.messageID === action.messageID)\n          mess.likes = mess.likes.filter(\n            (like) => like !== action.loggedUserID\n          );\n        return mess;\n      });\n      return {\n        ...state,\n        globalMessages: likedMessDelete,\n      };\n    }\n\n    case DISLIKE_MESSAGE: {\n      const dislikedMess = state.globalMessages.map((mess) => {\n        if (mess.messageID === action.messageID)\n          mess.dislikes.push(action.loggedUserID);\n        return mess;\n      });\n      return {\n        ...state,\n        globalMessages: dislikedMess,\n      };\n    }\n\n    case DISLIKE_MESSAGE_DELETE: {\n      const dislikedMessDelete = state.globalMessages.map((mess) => {\n        if (mess.messageID === action.messageID)\n          mess.dislikes = mess.dislikes.filter(\n            (dislike) => dislike !== action.loggedUserID\n          );\n        return mess;\n      });\n      return {\n        ...state,\n        globalMessages: dislikedMessDelete,\n      };\n    }\n\n    default:\n      return state;\n  }\n};\n\ninterface Action {\n  type: string;\n  newMessage: {\n    messageID: number;\n    userID: number;\n    text: string;\n    time: string;\n    date: string;\n    likes: number[];\n    dislikes: number[];\n  };\n  messageID: number;\n  loggedUserID: number;\n}\n","import { SET_NOTIFICATION_BAR, DELETE_NOTIFICATIONS } from \"./../types\";\n\nconst INITIAL_STATE = {\n  notificationList: [],\n};\n\nexport const notificationBarReducer = (\n  state = INITIAL_STATE,\n  action: Action\n) => {\n  switch (action.type) {\n    case SET_NOTIFICATION_BAR:\n      return {\n        ...state,\n        notificationList: [\n          ...state.notificationList,\n          {\n            messageText: action.messageText,\n            colorBar: action.colorBar,\n            animation: action.animation,\n          },\n        ],\n      };\n    case DELETE_NOTIFICATIONS:\n      return {\n        notificationList: action.notificationList,\n      };\n    default:\n      return state;\n  }\n};\n\ninterface Action {\n  type: string;\n  messageText: string;\n  colorBar: string;\n  animation: boolean;\n  notificationList: [];\n}\n","import { combineReducers } from \"redux\";\nimport { menuReducer } from \"./menuReducer\";\nimport { userReducer } from \"./userReducer\";\nimport { usersReducer } from \"./usersReducer\";\nimport { messageReducer } from \"./messagesReducer\";\nimport { notificationBarReducer } from \"./notificationBarReducer\";\n\nexport const rootReducer = combineReducers({\n  menu: menuReducer,\n  loggedUser: userReducer,\n  allUsers: usersReducer,\n  messages: messageReducer,\n  notificationBar: notificationBarReducer,\n});\n","import { createStore } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport { rootReducer } from \"./reducers/\";\n\nexport const store = createStore(rootReducer, composeWithDevTools());\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport { App } from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./store\";\nimport { HashRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter basename=\"/\">\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}